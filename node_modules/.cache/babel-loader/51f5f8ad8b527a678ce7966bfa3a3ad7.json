{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n\nconst UseFetch = initialUrl => {\n  _s();\n\n  // create state variables\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(null);\n  const [url, setUrl] = useState(initialUrl);\n  useEffect(() => {\n    if (!url) return;\n    setIsLoading(true); // clear old search\n\n    setData(null);\n    setError(null);\n    fetch(url).then(response => response.json()).then(data => {\n      // error handling for nonexistent data\n      setIsLoading(false);\n\n      if (data.cod >= 400) {\n        setError(data.message);\n        return;\n      }\n\n      setData(data);\n    }).catch(error => {\n      setIsLoading(false);\n      setError(error);\n    });\n  }, [url]);\n  return {\n    data,\n    error,\n    isLoading,\n    setUrl\n  };\n};\n\n_s(UseFetch, \"F3lv78lorYy5v82iSYPETfQkjSM=\");\n\n_c = UseFetch;\nexport default UseFetch;\n\nvar _c;\n\n$RefreshReg$(_c, \"UseFetch\");","map":{"version":3,"sources":["/Users/smekiboy/Desktop/weather/src/hooks/UseFetch.js"],"names":["useState","useEffect","UseFetch","initialUrl","data","setData","error","setError","isLoading","setIsLoading","url","setUrl","fetch","then","response","json","cod","message","catch"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,QAAQ,GAAIC,UAAD,IAAgB;AAAA;;AAC7B;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACU,GAAD,EAAMC,MAAN,IAAgBX,QAAQ,CAACG,UAAD,CAA9B;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACS,GAAL,EAAU;AACVD,IAAAA,YAAY,CAAC,IAAD,CAAZ,CAFY,CAGZ;;AACAJ,IAAAA,OAAO,CAAC,IAAD,CAAP;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;AAEAK,IAAAA,KAAK,CAACF,GAAD,CAAL,CACKG,IADL,CACWC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADxB,EAEKF,IAFL,CAEWT,IAAD,IAAU;AAEZ;AACAK,MAAAA,YAAY,CAAC,KAAD,CAAZ;;AACA,UAAIL,IAAI,CAACY,GAAL,IAAY,GAAhB,EAAqB;AACjBT,QAAAA,QAAQ,CAACH,IAAI,CAACa,OAAN,CAAR;AACA;AACH;;AACDZ,MAAAA,OAAO,CAACD,IAAD,CAAP;AACH,KAXL,EAYKc,KAZL,CAYYZ,KAAD,IAAW;AACdG,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAF,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACH,KAfL;AAgBH,GAvBQ,EAuBN,CAACI,GAAD,CAvBM,CAAT;AAyBA,SAAO;AAAEN,IAAAA,IAAF;AAAQE,IAAAA,KAAR;AAAeE,IAAAA,SAAf;AAA0BG,IAAAA;AAA1B,GAAP;AACH,CAjCD;;GAAMT,Q;;KAAAA,Q;AAmCN,eAAeA,QAAf","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst UseFetch = (initialUrl) => {\n    // create state variables\n    const [data, setData] = useState(null);\n    const [error, setError] = useState(null);\n    const [isLoading, setIsLoading] = useState(null);\n    const [url, setUrl] = useState(initialUrl);\n\n    useEffect(() => {\n        if (!url) return;\n        setIsLoading(true);\n        // clear old search\n        setData(null);\n        setError(null);\n\n        fetch(url)\n            .then((response) => response.json())\n            .then((data) => {\n\n                // error handling for nonexistent data\n                setIsLoading(false);\n                if (data.cod >= 400) {\n                    setError(data.message);\n                    return;\n                }\n                setData(data);\n            })\n            .catch((error) => {\n                setIsLoading(false);\n                setError(error);\n            });\n    }, [url]);\n\n    return { data, error, isLoading, setUrl };\n};\n\nexport default UseFetch;"]},"metadata":{},"sourceType":"module"}