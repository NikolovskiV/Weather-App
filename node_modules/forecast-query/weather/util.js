"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fromSameHour = exports.isDaily = exports.isLessOrEqualWoTime = exports.getUtcFromLocal = exports.getLocalFromUtc = exports.isPast = exports.isBetween = exports.closestWeek = exports.thirtyDaysAhead = exports.sixteenDaysAhead = exports.fiveDaysFromNow = exports.fourDaysFromNow = exports.daysAheadFromNow = exports.today = exports.setWhatIsToday = exports.arrayToUrl = void 0;
exports.arrayToUrl = function () {
    var array = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        array[_i] = arguments[_i];
    }
    return array.filter(function (s) { return s; }).join(',');
};
/**
 * Used for mocks, not real export
 */
exports.setWhatIsToday = function (date) { return whatIsToday = date; };
/**
 * Used for mocks, not real export
 */
var whatIsToday = null;
exports.today = function () { return whatIsToday ? new Date(whatIsToday) : new Date(); };
exports.daysAheadFromNow = function (days) {
    var now = exports.today();
    now.setHours(0);
    now.setMinutes(0);
    now.setSeconds(0);
    now.setMilliseconds(0);
    now.setDate(now.getDate() + days);
    return now;
};
exports.fourDaysFromNow = function () { return exports.daysAheadFromNow(4); };
exports.fiveDaysFromNow = function () { return exports.daysAheadFromNow(5); };
exports.sixteenDaysAhead = function () { return exports.daysAheadFromNow(16); };
exports.thirtyDaysAhead = function () { return exports.daysAheadFromNow(30); };
exports.closestWeek = function (type, now) {
    if (now === void 0) { now = exports.today(); }
    if (now.getUTCDay() === 1) {
        var end = new Date(now);
        end.setDate(end.getDate() + type === 'work' ? 5 : 7);
        return [now, end];
    }
    now.setDate(now.getDate() + 1);
    return exports.closestWeek(type, now);
};
exports.isBetween = function (from, to, query) { return from.getTime() <= query.from.getTime()
    && to.getTime() >= query.from.getTime()
    && from.getTime() <= query.to.getTime()
    && to.getTime() >= query.to.getTime(); };
exports.isPast = function (query) { return !exports.isDaily(query)
    && Math.floor(query.from.getTime() / (1000 * 60 * 60 * 24)) < Math.floor(exports.today().getTime() / (1000 * 60 * 60 * 24)); };
exports.getLocalFromUtc = function (time) { return time + (new Date().getTimezoneOffset() * 60 * 1000); };
exports.getUtcFromLocal = function (time) { return time - (new Date().getTimezoneOffset() * 60 * 1000); };
exports.isLessOrEqualWoTime = function (a, b) { return a.getFullYear() <= b.getFullYear()
    || a.getMonth() <= b.getMonth()
    || a.getDate() <= b.getDate(); };
exports.isDaily = function (query) {
    var now = exports.today();
    return now.getFullYear() === query.from.getFullYear()
        && now.getMonth() === query.from.getMonth()
        && now.getDate() === query.from.getDate()
        && now.getFullYear() === query.to.getFullYear()
        && now.getMonth() === query.to.getMonth()
        && now.getDate() === query.to.getDate();
};
exports.fromSameHour = function (query) { return exports.today().getHours() === query.from.getHours(); };
