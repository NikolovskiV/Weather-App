{"ast":null,"code":"var _jsxFileName = \"/Users/smekiboy/Desktop/weather/src/components/Forecast/Forecast.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Conditions from '../Conditions/Conditions';\nimport classes from './Forecast.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Forecast = () => {\n  _s();\n\n  let [responseObj, setResponseObj] = useState({});\n  let [city, setCity] = useState('');\n  let [unit, setUnit] = useState('imperial');\n  const uriEncodedCity = encodeURIComponent(city);\n  let [error, setError] = useState(false);\n  let [loading, setLoading] = useState(false);\n\n  function getForecast(e) {\n    e.preventDefault();\n\n    if (city.length === 0) {\n      return setError(true);\n    } // Clear state in preparation for new data\n\n\n    setError(false);\n    setResponseObj({});\n    setLoading(true);\n    let uriEncodedCity = encodeURIComponent(city);\n    fetch(`https://community-open-weather-map.p.rapidapi.com/weather?units=${unit}&q=${uriEncodedCity}`, {\n      \"method\": \"GET\",\n      \"headers\": {\n        \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"apikey\"\n      }\n    }).then(response => response.json()).then(response => {\n      if (response.cod !== 200) {\n        throw new Error();\n      }\n\n      setResponseObj(response);\n      setLoading(false);\n    }).catch(err => {\n      setError(true);\n      setLoading(false);\n      console.log(err.message);\n    });\n  } // .then(response => response.json())\n  // .then(response => {\n  //     console.log(response);\n  // })\n  // .catch(err => {\n  //     console.error(err);\n  // });\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Find Current Weather Conditions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: getForecast,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter City\",\n        maxLength: \"50\",\n        className: classes.textInput,\n        value: city,\n        onChange: e => setCity(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 20\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: classes.Radio,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: \"units\",\n          checked: unit === \"imperial\",\n          value: \"imperial\",\n          className: classes.textInput,\n          onChange: e => setUnit(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this), \"Fahrenheit\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: classes.Radio,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: \"units\",\n          checked: unit === \"metric\",\n          value: \"metric\",\n          className: classes.textInput,\n          onChange: e => setUnit(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this), \"Celcius\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: classes.Button,\n        type: \"submit\",\n        children: \"Get Forecast\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Conditions, {\n      responseObj: responseObj\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Forecast, \"RlfRB/7yFeFgr//CwvB1Hs/Uf5I=\");\n\n_c = Forecast;\nexport default Forecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"sources":["/Users/smekiboy/Desktop/weather/src/components/Forecast/Forecast.js"],"names":["React","useState","Conditions","classes","Forecast","responseObj","setResponseObj","city","setCity","unit","setUnit","uriEncodedCity","encodeURIComponent","error","setError","loading","setLoading","getForecast","e","preventDefault","length","fetch","then","response","json","cod","Error","catch","err","console","log","message","textInput","target","value","Radio","Button"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Conditions from '../Conditions/Conditions';\nimport classes from './Forecast.module.css';\n\n\nconst Forecast = () => {\n\n    let [responseObj, setResponseObj] = useState({});\n    let [city, setCity] = useState('');\n    let [unit, setUnit] = useState('imperial');\n    const uriEncodedCity = encodeURIComponent(city);\n    let [error, setError] = useState(false);\n    let [loading, setLoading] = useState(false);\n\n    function getForecast(e) {\n        e.preventDefault();\n\n        if (city.length === 0) {\n            return setError(true);\n        }\n\n        // Clear state in preparation for new data\n        setError(false);\n        setResponseObj({});\n\n        setLoading(true);\n\n        let uriEncodedCity = encodeURIComponent(city);\n\n        fetch(`https://community-open-weather-map.p.rapidapi.com/weather?units=${unit}&q=${uriEncodedCity}`, {\n            \"method\": \"GET\",\n            \"headers\": {\n                \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\",\n                \"x-rapidapi-key\": \"apikey\"\n            }\n        })\n            .then(response => response.json())\n            .then(response => {\n                if (response.cod !== 200) {\n                    throw new Error()\n                }\n\n                setResponseObj(response);\n                setLoading(false);\n            })\n            .catch(err => {\n                setError(true);\n                setLoading(false);\n                console.log(err.message);\n            });\n    }\n    // .then(response => response.json())\n    // .then(response => {\n    //     console.log(response);\n    // })\n    // .catch(err => {\n    //     console.error(err);\n    // });\n\n\n\n    return (\n        <div>\n            <h2>Find Current Weather Conditions</h2>\n            <form onSubmit={getForecast}>\n                <input\n                    type=\"text\"\n                    placeholder=\"Enter City\"\n                    maxLength=\"50\"\n                    className={classes.textInput}\n                    value={city}\n                    onChange={(e) => setCity(e.target.value)}\n                /> <br></br>\n                <label className={classes.Radio}>\n                    <input\n                        type=\"radio\"\n                        name=\"units\"\n                        checked={unit === \"imperial\"}\n                        value=\"imperial\"\n                        className={classes.textInput}\n                        onChange={(e) => setUnit(e.target.value)}\n                    />\n                    Fahrenheit\n                </label>\n                <label className={classes.Radio}>\n                    <input\n                        type=\"radio\"\n                        name=\"units\"\n                        checked={unit === \"metric\"}\n                        value=\"metric\"\n                        className={classes.textInput}\n                        onChange={(e) => setUnit(e.target.value)}\n                    />\n                    Celcius\n                </label>\n                <button className={classes.Button} type=\"submit\">Get Forecast</button>\n            </form>\n            <Conditions\n                responseObj={responseObj}\n            />\n        </div>\n    )\n}\n\nexport default Forecast;\n"]},"metadata":{},"sourceType":"module"}