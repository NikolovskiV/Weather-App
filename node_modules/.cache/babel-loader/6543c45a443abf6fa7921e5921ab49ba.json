{"ast":null,"code":"var _jsxFileName = \"/Users/smekiboy/Desktop/weather/src/App.js\";\n// import logo from './logo.svg';\nimport React, { Component, useEffect, useState } from 'react';\nimport './App.css';\nimport Clock from 'react-live-clock';\nimport WeatherInfo from './weatherinfo';\nimport { getSunrise, getSunset } from 'sunrise-sunset-js';\nimport Navbar from './Navbar';\nimport Forecast from './Forecast'; // import CitySelector from './components/CitySelector';\n// import { Container } from 'react-bootstrap';\n// import UseFetch from './hooks/UseFetch';\n// import { API_KEY, API_BASE_URL } from './apis/config';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      latitude: null,\n      longitude: null,\n      temp: null,\n      locationName: null,\n      country: null,\n      humidity: null,\n      visibility: null,\n      windSpeed: null,\n      feelsLike: null,\n      minTemp: null,\n      maxTemp: null,\n      weatherName: null,\n      sunrise: null,\n      sunset: null,\n      forecast: [],\n      fahrenheit: null,\n      celsius: null\n    };\n\n    this.getPostions = () => {\n      return new Promise(function (resolve, reject) {\n        navigator.geolocation.getCurrentPosition(resolve, reject);\n      });\n    };\n\n    this.getWeather = async (latitude, longitude) => {\n      const api = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&units=metric&appid=38ff886a4e3b7104f324a6067130ef6a`);\n      const data = await api.json();\n      console.log(data);\n      const sunset = getSunset(latitude, longitude);\n      const sunrise = getSunrise(latitude, longitude);\n      console.log(toString(sunset));\n      this.setState({\n        temp: Math.round(data.main.temp),\n        locationName: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        visibility: data.visibility,\n        windSpeed: data.wind.speed,\n        feelsLike: Math.round(data.main.feels_like),\n        minTemp: Math.round(data.main.temp_min),\n        maxTemp: Math.round(data.main.temp_max),\n        weatherName: data.weather[0].main,\n        sunrise: data.sys.sunrise,\n        sunset: data.sys.sunset\n      });\n    };\n\n    this.getForecast = async (latitude, longitude) => {\n      const api = await fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&units=metric&appid=38ff886a4e3b7104f324a6067130ef6a`);\n      const data = await api.json();\n      console.log(data);\n      this.setState({\n        forecast: data.list\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      this.getPostions().then(position => {\n        console.log(position.coords.latitude); // this.setState({ latitude: position.coords.latitude })\n\n        this.getWeather(position.coords.latitude, position.coords.longitude);\n        this.getForecast(position.coords.latitude, position.coords.longitude);\n      });\n    }\n  } // fetchLocationDay = async => {\n  //   const today = new DateTime.now();\n  //   for (let i = 0; i < 7; i++) {\n  //     a\n  //   }\n  // }\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-16 d-flex justify-content-center py-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-6 app-bg d-flex flex-wrap py-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-12\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"text-white m-0\",\n              children: this.state.locationName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-white\",\n              children: this.state.country\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-12 mt-auto d-flex\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"my-auto\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                className: \"text-white m-0\",\n                children: /*#__PURE__*/_jsxDEV(Clock, {\n                  format: 'HH:mm:ss',\n                  ticking: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 116,\n                  columnNumber: 48\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-white m-0\",\n                children: /*#__PURE__*/_jsxDEV(Clock, {\n                  date: '',\n                  format: 'dddd, MMMM DD, YYYY'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 118,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ml-auto\",\n              children: /*#__PURE__*/_jsxDEV(\"h1\", {\n                className: \"text-white\",\n                children: [this.state.temp, \"\\xB0C\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(WeatherInfo, {\n          humidity: this.state.humidity,\n          visibility: this.state.visibility,\n          windSpeed: this.state.windSpeed,\n          feelsLike: this.state.feelsLike,\n          minTemp: this.state.minTemp,\n          maxTemp: this.state.maxTemp,\n          weatherName: this.state.weatherName,\n          sunrise: this.state.sunrise,\n          sunset: this.state.sunset\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Forecast, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer\",\n        children: \"Created by Vande Nikolovski\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/smekiboy/Desktop/weather/src/App.js"],"names":["React","Component","useEffect","useState","Clock","WeatherInfo","getSunrise","getSunset","Navbar","Forecast","App","state","latitude","longitude","temp","locationName","country","humidity","visibility","windSpeed","feelsLike","minTemp","maxTemp","weatherName","sunrise","sunset","forecast","fahrenheit","celsius","getPostions","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","getWeather","api","fetch","data","json","console","log","toString","setState","Math","round","main","name","sys","wind","speed","feels_like","temp_min","temp_max","weather","getForecast","list","componentDidMount","then","position","coords","render"],"mappings":"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","sourcesContent":["// import logo from './logo.svg';\nimport React, { Component, useEffect, useState } from 'react';\nimport './App.css';\nimport Clock from 'react-live-clock';\nimport WeatherInfo from './weatherinfo';\nimport { getSunrise, getSunset } from 'sunrise-sunset-js';\nimport Navbar from './Navbar';\nimport Forecast from './Forecast';\n\n// import CitySelector from './components/CitySelector';\n// import { Container } from 'react-bootstrap';\n// import UseFetch from './hooks/UseFetch';\n// import { API_KEY, API_BASE_URL } from './apis/config';\n\nclass App extends React.Component {\n\n  state = {\n    latitude: null,\n    longitude: null,\n    temp: null,\n    locationName: null,\n    country: null,\n    humidity: null,\n    visibility: null,\n    windSpeed: null,\n    feelsLike: null,\n    minTemp: null,\n    maxTemp: null,\n    weatherName: null,\n    sunrise: null,\n    sunset: null,\n    forecast: [],\n    fahrenheit: null,\n    celsius: null\n  }\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      this.getPostions()\n        .then((position) => {\n          console.log(position.coords.latitude);\n          // this.setState({ latitude: position.coords.latitude })\n          this.getWeather(position.coords.latitude, position.coords.longitude)\n          this.getForecast(position.coords.latitude, position.coords.longitude);\n        })\n    }\n  }\n\n  // fetchLocationDay = async => {\n  //   const today = new DateTime.now();\n  //   for (let i = 0; i < 7; i++) {\n  //     a\n  //   }\n  // }\n\n  getPostions = () => {\n    return new Promise(function (resolve, reject) {\n      navigator.geolocation.getCurrentPosition(resolve, reject);\n    });\n  };\n  // api.openweathermap.org/data/2.5/forecast?lat={lat}&lon={lon}&appid={API key}\n  getWeather = async (latitude, longitude) => {\n    const api = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&units=metric&appid=38ff886a4e3b7104f324a6067130ef6a`\n    );\n\n    const data = await api.json();\n    console.log(data);\n    const sunset = getSunset(latitude, longitude);\n    const sunrise = getSunrise(latitude, longitude);\n    console.log(toString(sunset));\n    this.setState(\n      {\n        temp: Math.round(data.main.temp),\n        locationName: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        visibility: data.visibility,\n        windSpeed: data.wind.speed,\n        feelsLike: Math.round(data.main.feels_like),\n        minTemp: Math.round(data.main.temp_min),\n        maxTemp: Math.round(data.main.temp_max),\n        weatherName: data.weather[0].main,\n        sunrise: data.sys.sunrise,\n        sunset: data.sys.sunset\n      }\n    )\n  }\n\n  getForecast = async (latitude, longitude) => {\n    const api = await fetch(\n      `https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&units=metric&appid=38ff886a4e3b7104f324a6067130ef6a`\n    );\n\n    const data = await api.json();\n    console.log(data);\n    this.setState(\n      {\n        forecast: data.list\n      }\n    )\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Navbar />\n        <div className=\"col-16 d-flex justify-content-center py-5\">\n          <div className=\"col-6 app-bg d-flex flex-wrap py-3\">\n            <div className=\"col-12\">\n              <h2 className=\"text-white m-0\">{(this.state.locationName)}</h2>\n              <p className=\"text-white\">{(this.state.country)}</p>\n            </div>\n            <div className=\"col-12 mt-auto d-flex\">\n              <div className=\"my-auto\">\n                <h2 className=\"text-white m-0\"><Clock format={'HH:mm:ss'} ticking={true} /></h2>\n                <p className=\"text-white m-0\">\n                  <Clock date={''} format={'dddd, MMMM DD, YYYY'} />\n                </p>\n              </div>\n              <div className=\"ml-auto\">\n                <h1 className=\"text-white\">{(this.state.temp)}°C</h1>\n              </div>\n            </div>\n          </div>\n          <WeatherInfo humidity={this.state.humidity} visibility={this.state.visibility} windSpeed={this.state.windSpeed} feelsLike={this.state.feelsLike} minTemp={this.state.minTemp} maxTemp={this.state.maxTemp} weatherName={this.state.weatherName} sunrise={this.state.sunrise} sunset={this.state.sunset} />\n        </div>\n\n        <div>\n          <Forecast />\n        </div>\n\n        <div>\n\n        </div>\n\n        {/* <div>\n          {this.state.forecast.map(item => item.main.temp)}\n          {this.state.forecast.map(item => item.main.temp_max)}\n          {this.state.forecast.map(item => item.main.temp_max)}\n        </div> */}\n        <div className=\"footer\">\n          Created by Vande Nikolovski\n            </div>\n      </React.Fragment>\n\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}