"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.forecast = void 0;
var util_1 = require("./util");
var requests_1 = require("./requests");
var querify_1 = require("./querify");
var list_querify_1 = require("./list-querify");
var location = function () {
    var loc = {
        set: function (item) {
            delete loc.geo;
            delete loc.ids;
            delete loc.places;
            delete loc.zip;
            switch (item.kind) {
                case 'geo':
                    loc.geo = item.geo;
                    break;
                case 'id':
                    loc.ids = [item.id];
                    break;
                case 'ids':
                    loc.ids = item.ids;
                    break;
                case 'place':
                    loc.places = [item.place];
                    break;
                case 'places':
                    loc.places = item.places;
                    break;
                case 'zip':
                    loc.zip = item.zip;
                    break;
            }
            return loc;
        },
        get: function () {
            if (loc.geo) {
                return { kind: 'geo', geo: loc.geo };
            }
            if (loc.ids && loc.ids.length === 1) {
                return { kind: 'id', id: loc.ids[0] };
            }
            if (loc.ids && loc.ids.length > 1) {
                return { kind: 'ids', ids: loc.ids };
            }
            if (loc.places && loc.places.length === 1) {
                return { kind: 'place', place: loc.places[0] };
            }
            if (loc.places && loc.places.length > 1) {
                return { kind: 'places', places: loc.places };
            }
            if (loc.zip) {
                return { kind: 'zip', zip: loc.zip };
            }
            return { kind: 'nothing' };
        }
    };
    return loc;
};
var storageUnit = {
    stored: {},
    clear: function () {
        storageUnit.stored = {};
    },
    getItem: function (key) { return storageUnit.stored[key] ? JSON.stringify(storageUnit.stored[key]) : null; },
    key: function (index) { return Object.keys(storageUnit.stored)[index]; },
    length: 0,
    removeItem: function (key) {
        if (storageUnit.stored[key] !== undefined) {
            storageUnit.length -= 1;
            delete storageUnit.stored[key];
        }
    },
    setItem: function (key, value) {
        if (storageUnit.stored[key] === undefined) {
            storageUnit.length += 1;
            storageUnit.stored[key] = JSON.parse(value);
        }
    },
};
var resolve = function (forec) {
    var copy = forec.copy();
    Promise.all(forec.running).then(function () {
        forec.running = forec.subscribers.map(function (agent) { return agent(copy.dates[0], copy.dates[1], copy); });
    });
};
exports.forecast = function (apiKey, isPro) {
    if (isPro === void 0) { isPro = false; }
    if (!apiKey) {
        throw Error('Cannot initialize forecast without api key from openweathermap.org!');
    }
    var todayValue = util_1.today();
    var end = new Date(todayValue);
    end.setHours(23);
    end.setMinutes(59);
    end.setSeconds(59);
    var forec = querify_1.querify({
        dates: [todayValue, end],
        storage: storageUnit,
        location: location().set({ kind: 'place', place: 'New York' }),
        lang: 'en',
        language: function (lang) {
            forec.lang = lang;
            forec.response = [];
            resolve(forec);
            return forec;
        },
        units: function (unit) {
            forec.unit = unit === 'kelvin' ? undefined : unit;
            forec.response = [];
            resolve(forec);
            return forec;
        },
        reporter: console.warn,
        fetchingFn: typeof window !== 'undefined' ? window.fetch : undefined,
        geo: function (geolocation) {
            if (geolocation === void 0) { geolocation = typeof navigator !== 'undefined' && typeof navigator.geolocation !== 'undefined' ? navigator.geolocation : undefined; }
            return __awaiter(void 0, void 0, void 0, function () {
                var result, e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!geolocation) {
                                return [2 /*return*/, forec];
                            }
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, new Promise(function (resolve, reject) { return geolocation.getCurrentPosition(resolve, reject); })];
                        case 2:
                            result = _a.sent();
                            forec.around(result.coords.latitude, result.coords.longitude);
                            return [3 /*break*/, 4];
                        case 3:
                            e_1 = _a.sent();
                            forec.reporter(e_1);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/, forec];
                    }
                });
            });
        },
        around: function (lat, lon) {
            forec.location.set({ kind: 'geo', geo: { lat: lat, lon: lon } });
            forec.response = [];
            resolve(forec);
            return forec;
        },
        at: function (from, to) {
            if (!to) {
                var end_1 = new Date(from);
                end_1.setHours(23);
                end_1.setMinutes(59);
                end_1.setSeconds(59);
                forec.dates = [new Date(from), end_1];
            }
            else {
                forec.dates = [new Date(from), new Date(to)];
            }
            resolve(forec);
            return forec;
        },
        copy: function () {
            var copy = exports.forecast(apiKey, isPro);
            copy.dates = __spreadArrays(forec.dates);
            copy.location = __assign({}, forec.location);
            copy.response = __spreadArrays(forec.response);
            copy.reporter = forec.reporter;
            copy.fetchingFn = forec.fetchingFn;
            copy.storage = forec.storage;
            copy.subscribers = __spreadArrays(forec.subscribers);
            copy.running = __spreadArrays(forec.running);
            copy.unit = forec.unit;
            copy.lang = forec.lang;
            copy.reporter = forec.reporter;
            return copy;
        },
        fetch: function (fn) {
            forec.fetchingFn = fn;
            return forec;
        },
        in: function () {
            var places = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                places[_i] = arguments[_i];
            }
            if (places.length > 0) {
                if (typeof places[0] === 'string') {
                    if (places.length > 1) {
                        forec.location.set({ kind: 'places', places: places });
                    }
                    else {
                        forec.location.set({ kind: 'place', place: places[0] });
                    }
                }
                if (typeof places[0] === 'number') {
                    if (places.length > 1) {
                        forec.location.set({ kind: 'ids', ids: places });
                    }
                    else {
                        forec.location.set({ kind: 'id', id: places[0] });
                    }
                }
                forec.response = [];
                resolve(forec);
            }
            return forec;
        },
        zip: function (code, country) {
            forec.location.set({ kind: 'zip', zip: { code: code, country: country } });
            forec.response = [];
            resolve(forec);
            return forec;
        },
        error: function (reporter) {
            forec.reporter = reporter;
            return forec;
        },
        subscribe: function () {
            var agents = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                agents[_i] = arguments[_i];
            }
            forec.subscribers = agents;
            return forec;
        },
        clearSubscribers: function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Promise.all(forec.running)];
                    case 1:
                        _a.sent();
                        forec.subscribers = [];
                        return [2 /*return*/, forec];
                }
            });
        }); },
        subscribers: [],
        running: [],
        dayAfterTomorrow: function () {
            forec.at(util_1.daysAheadFromNow(2));
            return forec;
        },
        dayBeforeYesterday: function () {
            forec.at(util_1.daysAheadFromNow(-2));
            return forec;
        },
        tomorrow: function () {
            forec.at(util_1.daysAheadFromNow(1));
            return forec;
        },
        yesterday: function () {
            forec.at(util_1.daysAheadFromNow(-1));
            return forec;
        },
        today: function () {
            var todayValue = util_1.today();
            var end = new Date(todayValue);
            end.setHours(23);
            end.setMinutes(59);
            end.setSeconds(59);
            forec.at(todayValue, end);
            return forec;
        },
        next: function (which) {
            if (!which || which === 'day') {
                var nextFrom = new Date(forec.dates[0]);
                nextFrom.setDate(nextFrom.getDate() + 1);
                var nextEnd = new Date(nextFrom);
                nextEnd.setDate(nextEnd.getDate() + 1);
                forec.at(nextFrom, nextEnd);
            }
            else {
                var nextFrom = new Date(forec.dates[0]);
                nextFrom.setHours(nextFrom.getHours() + 1);
                var nextEnd = new Date(nextFrom);
                nextEnd.setDate(nextEnd.getDate() + 1);
                forec.at(nextFrom, nextEnd);
            }
            return forec;
        },
        previous: function (which) {
            if (!which || which === 'day') {
                var nextFrom = new Date(forec.dates[0]);
                nextFrom.setDate(nextFrom.getDate() - 1);
                var nextEnd = new Date(nextFrom);
                nextEnd.setDate(nextEnd.getDate() + 1);
                forec.at(nextFrom, nextEnd);
            }
            else {
                var nextFrom = new Date(forec.dates[0]);
                nextFrom.setHours(nextFrom.getHours() - 1);
                var nextEnd = new Date(nextFrom);
                nextEnd.setDate(nextEnd.getDate() + 1);
                forec.at(nextFrom, nextEnd);
            }
            return forec;
        },
        week: function (kind) {
            forec.at.apply(forec, util_1.closestWeek(kind || 'all'));
            return forec;
        },
        hour: function (which) {
            var movedDate = new Date(forec.dates[0]);
            movedDate.setHours(which);
            var end = new Date(movedDate.toString());
            end.setHours(23);
            end.setMinutes(59);
            end.setSeconds(59);
            forec.at(movedDate, end);
            return forec;
        },
        icon: function (ico) { return "http://openweathermap.org/img/wn/" + ico + "@2x.png"; },
        store: function (storage, timeout) {
            forec.storage = storage;
            if (timeout !== undefined && timeout !== 'never') {
                if (forec.storeClearTimeout !== undefined) {
                    clearInterval(forec.storeClearTimeout);
                }
                forec.storeClearTimeout = setInterval(function () {
                    forec.response = [];
                    forec.storage.clear();
                }, timeout * 60 * 1000);
            }
            return forec;
        },
        response: [],
        result: function () { return __awaiter(void 0, void 0, void 0, function () {
            var filterResultsByDate, fetcher, getByDate, locationResolved, apiQuery, buildResponse, _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
            var _v, _w, _x, _y, _z, _0;
            return __generator(this, function (_1) {
                switch (_1.label) {
                    case 0:
                        filterResultsByDate = function (results) { return results.filter(function (res) { return res.weather.dt >= forec.dates[0].getTime()
                            && res.weather.dt <= forec.dates[1].getTime(); }); };
                        fetcher = forec.fetchingFn;
                        if (fetcher === undefined) {
                            return [2 /*return*/, forec.response];
                        }
                        getByDate = filterResultsByDate(forec.response);
                        if (getByDate.length > 0) {
                            return [2 /*return*/, getByDate];
                        }
                        locationResolved = forec.location.get();
                        apiQuery = {
                            appid: apiKey,
                            isPro: isPro,
                            units: forec.unit,
                            lang: forec.lang,
                            from: forec.dates[0],
                            to: forec.dates[1],
                            by: !isPro && locationResolved.kind !== 'geo' ? 'day' : 'hour',
                        };
                        buildResponse = function (query) { return requests_1.request(query, fetcher, forec.storage, forec.reporter); };
                        _a = locationResolved.kind;
                        switch (_a) {
                            case 'geo': return [3 /*break*/, 1];
                            case 'id': return [3 /*break*/, 3];
                            case 'ids': return [3 /*break*/, 5];
                            case 'place': return [3 /*break*/, 7];
                            case 'places': return [3 /*break*/, 9];
                            case 'zip': return [3 /*break*/, 11];
                        }
                        return [3 /*break*/, 13];
                    case 1:
                        _c = (_b = (_v = forec.response).push).apply;
                        _d = [_v];
                        return [4 /*yield*/, buildResponse(__assign(__assign({}, apiQuery), { kind: 'geo', lat: locationResolved.geo.lat, lon: locationResolved.geo.lon }))];
                    case 2:
                        _c.apply(_b, _d.concat([((_1.sent()) || [])]));
                        return [3 /*break*/, 13];
                    case 3:
                        _f = (_e = (_w = forec.response).push).apply;
                        _g = [_w];
                        return [4 /*yield*/, buildResponse(__assign(__assign({}, apiQuery), { kind: 'id', cityId: locationResolved.id.toString() }))];
                    case 4:
                        _f.apply(_e, _g.concat([((_1.sent()) || [])]));
                        return [3 /*break*/, 13];
                    case 5:
                        _j = (_h = (_x = forec.response).push).apply;
                        _k = [_x];
                        return [4 /*yield*/, buildResponse(__assign(__assign({}, apiQuery), { kind: 'ids', citiesId: locationResolved.ids.map(function (id) { return id.toString(); }) }))];
                    case 6:
                        _j.apply(_h, _k.concat([((_1.sent()) || [])]));
                        return [3 /*break*/, 13];
                    case 7:
                        _m = (_l = (_y = forec.response).push).apply;
                        _o = [_y];
                        return [4 /*yield*/, buildResponse(__assign(__assign({}, apiQuery), { kind: 'city', cityName: locationResolved.place }))];
                    case 8:
                        _m.apply(_l, _o.concat([((_1.sent()) || [])]));
                        return [3 /*break*/, 13];
                    case 9:
                        _q = (_p = (_z = forec.response).push).apply;
                        _r = [_z];
                        return [4 /*yield*/, buildResponse(__assign(__assign({}, apiQuery), { kind: 'city', cityName: locationResolved.places.join(',') }))];
                    case 10:
                        _q.apply(_p, _r.concat([((_1.sent()) || [])]));
                        return [3 /*break*/, 13];
                    case 11:
                        _t = (_s = (_0 = forec.response).push).apply;
                        _u = [_0];
                        return [4 /*yield*/, buildResponse(__assign(__assign({}, apiQuery), { kind: 'zip', zipCode: locationResolved.zip.code, countryCode: locationResolved.zip.country }))];
                    case 12:
                        _t.apply(_s, _u.concat([((_1.sent()) || [])]));
                        return [3 /*break*/, 13];
                    case 13:
                        forec.response = forec.response.sort(function (a, b) { return a.weather.dt - b.weather.dt; });
                        return [2 /*return*/, filterResultsByDate(forec.response)];
                }
            });
        }); },
        list: function (by) { return list_querify_1.listModification(forec, by || 'day'); },
    });
    return forec;
};
