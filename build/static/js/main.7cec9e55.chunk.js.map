{"version":3,"sources":["components/Forecast/Forecast.module.css","weatherinfo.js","components/Conditions/Conditions.js","components/Forecast/Forecast.js","App.js","reportWebVitals.js","index.js","components/Conditions/Conditions.module.css"],"names":["module","exports","defaults","WeatherInfo","props","weatherIcon","weatherName","Fragment","className","icon","color","size","animate","humidity","visibility","windSpeed","feelsLike","minTemp","maxTemp","Date","sunrise","toLocaleTimeString","sunset","conditions","classes","Wrapper","error","Small","loading","Loader","responseObj","cod","name","Math","round","main","temp","weather","description","Forecast","useState","setResponseObj","city","setCity","unit","setUnit","encodeURIComponent","setError","setLoading","onSubmit","e","preventDefault","length","uriEncodedCity","fetch","then","response","json","Error","catch","err","console","log","message","type","placeholder","maxLength","textInput","value","onChange","target","Radio","checked","Button","Conditions","App","state","latitude","longitude","locationName","country","forecast","getPostions","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","getWeather","a","api","data","getSunset","getSunrise","toString","setState","sys","wind","speed","feels_like","temp_min","temp_max","getForecast","list","this","position","coords","format","ticking","date","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7cec9e55.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TextInput\":\"Forecast_TextInput__2ur0J\",\"Radio\":\"Forecast_Radio__1Ejlt\",\"Button\":\"Forecast_Button__3Y_IL\"};","import React from 'react';\nimport ReactAnimatedWeather from 'react-animated-weather';\n\n\nconst defaults = {\n    icon: 'CLEAR_DAY',\n    color: 'white',\n    size: 100,\n    animate: true\n};\n\n\nfunction WeatherInfo(props) {\n    var weatherIcon;\n    switch (props.weatherName) {\n        case \"Clear\":\n            weatherIcon = 'CLEAR_DAY';\n            break;\n        case \"Rain\":\n            weatherIcon = \"RAIN\";\n            break;\n        case \"Rain\":\n            weatherIcon = \"CLOUDY\";\n            break;\n        default:\n            weatherIcon = 'CLEAR_DAY'\n    }\n    return (\n        <React.Fragment>\n            <div className=\"col-4 side-bg text-center py-3\">\n                <ReactAnimatedWeather\n                    icon={weatherIcon}\n                    color={defaults.color}\n                    size={defaults.size}\n                    animate={defaults.animate}\n                />\n                <h2 className=\"text-white py-2\">{props.weatherName}</h2>\n                <div className=\"d-flex flex-wrap\">\n                    <div className=\"d-flex col-12 py-2\">\n                        <div className=\"text-white\"><strong>Humidity</strong></div>\n                        <div className=\"text-white ml-auto\">{props.humidity}%</div>\n                    </div>\n                    <div className=\"d-flex col-12 py-1\">\n                        <div className=\"text-white\"><strong>Visiblity</strong></div>\n                        <div className=\"text-white ml-auto\">{props.visibility} mi</div>\n                    </div>\n                    <div className=\"d-flex col-12 py-1\">\n                        <div className=\"text-white\"><strong>Wind Speed</strong></div>\n                        <div className=\"text-white ml-auto\">{props.windSpeed} km/h</div>\n                    </div>\n                    <div className=\"d-flex col-12 py-1\">\n                        <div className=\"text-white\"><strong>Feels Like</strong></div>\n                        <div className=\"text-white ml-auto\">{props.feelsLike} °C</div>\n                    </div>\n                    <div className=\"d-flex col-12 py-1\">\n                        <div className=\"text-white\"><strong>Min Temp</strong></div>\n                        <div className=\"text-white ml-auto\">{props.minTemp} °C</div>\n                    </div>\n                    <div className=\"d-flex col-12 py-1\">\n                        <div className=\"text-white\"><strong>Max Temp</strong></div>\n                        <div className=\"text-white ml-auto\">{props.maxTemp} °C</div>\n                    </div>\n                    <div className=\"d-flex col-12 py-1\">\n                        <div className=\"text-white\"><strong>Sunrise</strong></div>\n                        <div className=\"text-white ml-auto\">{new Date(props.sunrise * 1000).toLocaleTimeString(\n                            \"sv-SE\"\n                        )} h</div>\n                    </div>\n                    <div className=\"d-flex col-12 py-1\">\n                        <div className=\"text-white\"><strong>Sunset</strong></div>\n                        <div className=\"text-white ml-auto\">{new Date(props.sunset * 1000).toLocaleTimeString(\n                            \"sv-SE\"\n                        )} h</div>\n                    </div>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default WeatherInfo;","import React from 'react';\nimport classes from './Conditions.module.css';\n\nconst conditions = (props) => {\n    return (\n        <div className={classes.Wrapper}>\n\n            {props.error && <small className={classes.Small}>Please enter a valid city.</small>}\n\n            {props.loading && <div className={classes.Loader} />}\n\n\n            {props.responseObj.cod === 200 ?\n                <div>\n                    <p><strong>{props.responseObj.name}</strong></p>\n                    <p>It is currently {Math.round(props.responseObj.main.temp)} degrees out with {props.responseObj.weather[0].description}.</p>\n                </div>\n                : null\n            }\n        </div>\n    )\n}\n\nexport default conditions;","import React, { useState } from 'react';\nimport Conditions from '../Conditions/Conditions';\nimport classes from './Forecast.module.css';\n\n\nconst Forecast = () => {\n\n    let [responseObj, setResponseObj] = useState({});\n    let [city, setCity] = useState('');\n    let [unit, setUnit] = useState('imperial');\n    const uriEncodedCity = encodeURIComponent(city);\n    let [error, setError] = useState(false);\n    let [loading, setLoading] = useState(false);\n\n    function getForecast(e) {\n        e.preventDefault();\n\n        if (city.length === 0) {\n            return setError(true);\n        }\n\n        // Clear state in preparation for new data\n        setError(false);\n        setResponseObj({});\n\n        setLoading(true);\n\n        let uriEncodedCity = encodeURIComponent(city);\n\n        fetch(`https://community-open-weather-map.p.rapidapi.com/weather?units=${unit}&q=${uriEncodedCity}`, {\n            \"method\": \"GET\",\n            \"headers\": {\n                \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\",\n                \"x-rapidapi-key\": \"apikey\"\n            }\n        })\n            .then(response => response.json())\n            .then(response => {\n                if (response.cod !== 200) {\n                    throw new Error()\n                }\n\n                setResponseObj(response);\n                setLoading(false);\n            })\n            .catch(err => {\n                setError(true);\n                setLoading(false);\n                console.log(err.message);\n            });\n    }\n    // .then(response => response.json())\n    // .then(response => {\n    //     console.log(response);\n    // })\n    // .catch(err => {\n    //     console.error(err);\n    // });\n\n\n\n    return (\n        <div>\n            <h2>Find Current Weather Conditions</h2>\n            <form onSubmit={getForecast}>\n                <input\n                    type=\"text\"\n                    placeholder=\"Enter City\"\n                    maxLength=\"50\"\n                    className={classes.textInput}\n                    value={city}\n                    onChange={(e) => setCity(e.target.value)}\n                /> <br></br>\n                <label className={classes.Radio}>\n                    <input\n                        type=\"radio\"\n                        name=\"units\"\n                        checked={unit === \"imperial\"}\n                        value=\"imperial\"\n                        className={classes.textInput}\n                        onChange={(e) => setUnit(e.target.value)}\n                    />\n                    Fahrenheit\n                </label>\n                <label className={classes.Radio}>\n                    <input\n                        type=\"radio\"\n                        name=\"units\"\n                        checked={unit === \"metric\"}\n                        value=\"metric\"\n                        className={classes.textInput}\n                        onChange={(e) => setUnit(e.target.value)}\n                    />\n                    Celcius\n                </label>\n                <button className={classes.Button} type=\"submit\">Get Forecast</button>\n            </form>\n            <Conditions\n                responseObj={responseObj}\n                error={error} //new\n                loading={loading} //new\n            />\n        </div>\n    )\n}\n\nexport default Forecast;\n","// import logo from './logo.svg';\nimport React, { Component, useEffect, useState } from 'react';\nimport './App.css';\nimport Clock from 'react-live-clock';\nimport WeatherInfo from './weatherinfo';\nimport { getSunrise, getSunset } from 'sunrise-sunset-js';\nimport Forecast from \"./components/Forecast/Forecast\";\n\n\n\n\nclass App extends React.Component {\n  state = {\n    latitude: null,\n    longitude: null,\n    temp: null,\n    locationName: null,\n    country: null,\n    humidity: null,\n    visibility: null,\n    windSpeed: null,\n    feelsLike: null,\n    minTemp: null,\n    maxTemp: null,\n    weatherName: null,\n    sunrise: null,\n    sunset: null,\n    forecast: []\n  }\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      this.getPostions()\n        .then((position) => {\n          console.log(position.coords.latitude);\n          // this.setState({ latitude: position.coords.latitude })\n          this.getWeather(position.coords.latitude, position.coords.longitude)\n          this.getForecast(position.coords.latitude, position.coords.longitude);\n        })\n    }\n  }\n\n  // fetchLocationDay = async => {\n  //   const today = new DateTime.now();\n  //   for (let i = 0; i < 7; i++) {\n  //     a\n  //   }\n  // }\n\n  getPostions = () => {\n    return new Promise(function (resolve, reject) {\n      navigator.geolocation.getCurrentPosition(resolve, reject);\n    });\n  };\n  // api.openweathermap.org/data/2.5/forecast?lat={lat}&lon={lon}&appid={API key}\n  getWeather = async (latitude, longitude) => {\n    const api = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&units=metric&appid=38ff886a4e3b7104f324a6067130ef6a`\n    );\n\n    const data = await api.json();\n    console.log(data);\n    const sunset = getSunset(latitude, longitude);\n    const sunrise = getSunrise(latitude, longitude);\n    console.log(toString(sunset));\n    this.setState(\n      {\n        temp: Math.round(data.main.temp),\n        locationName: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        visibility: data.visibility,\n        windSpeed: data.wind.speed,\n        feelsLike: Math.round(data.main.feels_like),\n        minTemp: Math.round(data.main.temp_min),\n        maxTemp: Math.round(data.main.temp_max),\n        weatherName: data.weather[0].main,\n        sunrise: data.sys.sunrise,\n        sunset: data.sys.sunset\n      }\n    )\n  }\n\n\n\n  getForecast = async (latitude, longitude) => {\n    const api = await fetch(\n      `https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&units=metric&appid=38ff886a4e3b7104f324a6067130ef6a`\n    );\n\n    const data = await api.json();\n    console.log(data);\n    this.setState(\n      {\n        forecast: data.list\n      }\n    )\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"col-8 d-flex justify-content-center py-5\">\n          <div className=\"col-6 app-bg d-flex flex-wrap py-3\">\n            <div className=\"col-12\">\n              <h2 className=\"text-white m-0\">{(this.state.locationName)}</h2>\n              <p className=\"text-white\">{(this.state.country)}</p>\n            </div>\n            <div className=\"col-12 mt-auto d-flex\">\n              <div className=\"my-auto\">\n                <h2 className=\"text-white m-0\"><Clock format={'HH:mm:ss'} ticking={true} /></h2>\n                <p className=\"text-white m-0\">\n                  <Clock date={''} format={'dddd, MMMM DD, YYYY'} />\n                </p>\n              </div>\n              <div className=\"ml-auto\">\n                <h1 className=\"text-white\">{(this.state.temp)}°C</h1>\n              </div>\n            </div>\n          </div>\n          <WeatherInfo humidity={this.state.humidity} visibility={this.state.visibility} windSpeed={this.state.windSpeed} feelsLike={this.state.feelsLike} minTemp={this.state.minTemp} maxTemp={this.state.maxTemp} weatherName={this.state.weatherName} sunrise={this.state.sunrise} sunset={this.state.sunset} />\n        </div>\n        {/* <div>\n          <div className=\"d-flex col-12 py-1\">\n            {this.state.forecast.map(item => item.main.temp)}\n          </div>\n          <div className=\"d-flex col-12 py-1\">\n            {this.state.forecast.map(item => item.main.temp_max)}\n          </div>\n          <div className=\"d-flex col-12 py-1\">\n            {this.state.forecast.map(item => item.main.temp_min)}\n          </div>\n        </div> */}\n        <div className=\"App\">\n          {/* <header className=\"App-header\">\n            <h1>React Weather App</h1>\n          </header> */}\n          <main>\n            <Forecast />\n          </main>\n          <footer>\n            Page created by Vande Nikolovski\n      </footer>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrapper\":\"Conditions_Wrapper__1WUTs\",\"Small\":\"Conditions_Small__1VrqO\",\"Loader\":\"Conditions_Loader__PcSFJ\",\"spin\":\"Conditions_spin__b05Or\"};"],"sourceRoot":""}