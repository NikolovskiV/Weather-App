{"ast":null,"code":"import _regeneratorRuntime from\"/Users/smekiboy/Desktop/weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/smekiboy/Desktop/weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/Users/smekiboy/Desktop/weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/smekiboy/Desktop/weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/smekiboy/Desktop/weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/smekiboy/Desktop/weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";// import logo from './logo.svg';\nimport React,{Component,useEffect,useState}from'react';import'./App.css';import Clock from'react-live-clock';import WeatherInfo from'./weatherinfo';import{getSunrise,getSunset}from'sunrise-sunset-js';import Forecast from\"./components/Forecast/Forecast\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var App=/*#__PURE__*/function(_React$Component){_inherits(App,_React$Component);var _super=_createSuper(App);function App(){var _this;_classCallCheck(this,App);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={latitude:null,longitude:null,temp:null,locationName:null,country:null,humidity:null,visibility:null,windSpeed:null,feelsLike:null,minTemp:null,maxTemp:null,weatherName:null,sunrise:null,sunset:null,forecast:[]};_this.getPostions=function(){return new Promise(function(resolve,reject){navigator.geolocation.getCurrentPosition(resolve,reject);});};_this.getWeather=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(latitude,longitude){var api,data,sunset,sunrise;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(\"https://api.openweathermap.org/data/2.5/weather?lat=\".concat(latitude,\"&lon=\").concat(longitude,\"&units=metric&appid=38ff886a4e3b7104f324a6067130ef6a\"));case 2:api=_context.sent;_context.next=5;return api.json();case 5:data=_context.sent;console.log(data);sunset=getSunset(latitude,longitude);sunrise=getSunrise(latitude,longitude);console.log(toString(sunset));_this.setState({temp:Math.round(data.main.temp),locationName:data.name,country:data.sys.country,humidity:data.main.humidity,visibility:data.visibility,windSpeed:data.wind.speed,feelsLike:Math.round(data.main.feels_like),minTemp:Math.round(data.main.temp_min),maxTemp:Math.round(data.main.temp_max),weatherName:data.weather[0].main,sunrise:data.sys.sunrise,sunset:data.sys.sunset});case 11:case\"end\":return _context.stop();}}},_callee);}));return function(_x,_x2){return _ref.apply(this,arguments);};}();_this.getForecast=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(latitude,longitude){var api,data;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return fetch(\"https://api.openweathermap.org/data/2.5/forecast?lat=\".concat(latitude,\"&lon=\").concat(longitude,\"&units=metric&appid=38ff886a4e3b7104f324a6067130ef6a\"));case 2:api=_context2.sent;_context2.next=5;return api.json();case 5:data=_context2.sent;console.log(data);_this.setState({forecast:data.list});case 8:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x3,_x4){return _ref2.apply(this,arguments);};}();return _this;}_createClass(App,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;if(navigator.geolocation){this.getPostions().then(function(position){console.log(position.coords.latitude);// this.setState({ latitude: position.coords.latitude })\n_this2.getWeather(position.coords.latitude,position.coords.longitude);_this2.getForecast(position.coords.latitude,position.coords.longitude);});}}// fetchLocationDay = async => {\n//   const today = new DateTime.now();\n//   for (let i = 0; i < 7; i++) {\n//     a\n//   }\n// }\n},{key:\"render\",value:function render(){return/*#__PURE__*/_jsxs(React.Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"col-8 d-flex justify-content-center py-5\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"col-6 app-bg d-flex flex-wrap py-3\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"col-12\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-white m-0\",children:this.state.locationName}),/*#__PURE__*/_jsx(\"p\",{className:\"text-white\",children:this.state.country})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"col-12 mt-auto d-flex\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"my-auto\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-white m-0\",children:/*#__PURE__*/_jsx(Clock,{format:'HH:mm:ss',ticking:true})}),/*#__PURE__*/_jsx(\"p\",{className:\"text-white m-0\",children:/*#__PURE__*/_jsx(Clock,{date:'',format:'dddd, MMMM DD, YYYY'})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"ml-auto\",children:/*#__PURE__*/_jsxs(\"h1\",{className:\"text-white\",children:[this.state.temp,\"\\xB0C\"]})})]})]}),/*#__PURE__*/_jsx(WeatherInfo,{humidity:this.state.humidity,visibility:this.state.visibility,windSpeed:this.state.windSpeed,feelsLike:this.state.feelsLike,minTemp:this.state.minTemp,maxTemp:this.state.maxTemp,weatherName:this.state.weatherName,sunrise:this.state.sunrise,sunset:this.state.sunset})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"main\",{children:/*#__PURE__*/_jsx(Forecast,{})}),/*#__PURE__*/_jsx(\"footer\",{children:\"Page created by Vande Nikolovski\"})]})]});}}]);return App;}(React.Component);export default App;","map":{"version":3,"sources":["/Users/smekiboy/Desktop/weather/src/App.js"],"names":["React","Component","useEffect","useState","Clock","WeatherInfo","getSunrise","getSunset","Forecast","App","state","latitude","longitude","temp","locationName","country","humidity","visibility","windSpeed","feelsLike","minTemp","maxTemp","weatherName","sunrise","sunset","forecast","getPostions","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","getWeather","fetch","api","json","data","console","log","toString","setState","Math","round","main","name","sys","wind","speed","feels_like","temp_min","temp_max","weather","getForecast","list","then","position","coords"],"mappings":"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","sourcesContent":["// import logo from './logo.svg';\nimport React, { Component, useEffect, useState } from 'react';\nimport './App.css';\nimport Clock from 'react-live-clock';\nimport WeatherInfo from './weatherinfo';\nimport { getSunrise, getSunset } from 'sunrise-sunset-js';\nimport Forecast from \"./components/Forecast/Forecast\";\n\n\n\n\nclass App extends React.Component {\n  state = {\n    latitude: null,\n    longitude: null,\n    temp: null,\n    locationName: null,\n    country: null,\n    humidity: null,\n    visibility: null,\n    windSpeed: null,\n    feelsLike: null,\n    minTemp: null,\n    maxTemp: null,\n    weatherName: null,\n    sunrise: null,\n    sunset: null,\n    forecast: []\n  }\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      this.getPostions()\n        .then((position) => {\n          console.log(position.coords.latitude);\n          // this.setState({ latitude: position.coords.latitude })\n          this.getWeather(position.coords.latitude, position.coords.longitude)\n          this.getForecast(position.coords.latitude, position.coords.longitude);\n        })\n    }\n  }\n\n  // fetchLocationDay = async => {\n  //   const today = new DateTime.now();\n  //   for (let i = 0; i < 7; i++) {\n  //     a\n  //   }\n  // }\n\n  getPostions = () => {\n    return new Promise(function (resolve, reject) {\n      navigator.geolocation.getCurrentPosition(resolve, reject);\n    });\n  };\n  // api.openweathermap.org/data/2.5/forecast?lat={lat}&lon={lon}&appid={API key}\n  getWeather = async (latitude, longitude) => {\n    const api = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&units=metric&appid=38ff886a4e3b7104f324a6067130ef6a`\n    );\n\n    const data = await api.json();\n    console.log(data);\n    const sunset = getSunset(latitude, longitude);\n    const sunrise = getSunrise(latitude, longitude);\n    console.log(toString(sunset));\n    this.setState(\n      {\n        temp: Math.round(data.main.temp),\n        locationName: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        visibility: data.visibility,\n        windSpeed: data.wind.speed,\n        feelsLike: Math.round(data.main.feels_like),\n        minTemp: Math.round(data.main.temp_min),\n        maxTemp: Math.round(data.main.temp_max),\n        weatherName: data.weather[0].main,\n        sunrise: data.sys.sunrise,\n        sunset: data.sys.sunset\n      }\n    )\n  }\n\n\n\n  getForecast = async (latitude, longitude) => {\n    const api = await fetch(\n      `https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&units=metric&appid=38ff886a4e3b7104f324a6067130ef6a`\n    );\n\n    const data = await api.json();\n    console.log(data);\n    this.setState(\n      {\n        forecast: data.list\n      }\n    )\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"col-8 d-flex justify-content-center py-5\">\n          <div className=\"col-6 app-bg d-flex flex-wrap py-3\">\n            <div className=\"col-12\">\n              <h2 className=\"text-white m-0\">{(this.state.locationName)}</h2>\n              <p className=\"text-white\">{(this.state.country)}</p>\n            </div>\n            <div className=\"col-12 mt-auto d-flex\">\n              <div className=\"my-auto\">\n                <h2 className=\"text-white m-0\"><Clock format={'HH:mm:ss'} ticking={true} /></h2>\n                <p className=\"text-white m-0\">\n                  <Clock date={''} format={'dddd, MMMM DD, YYYY'} />\n                </p>\n              </div>\n              <div className=\"ml-auto\">\n                <h1 className=\"text-white\">{(this.state.temp)}°C</h1>\n              </div>\n            </div>\n          </div>\n          <WeatherInfo humidity={this.state.humidity} visibility={this.state.visibility} windSpeed={this.state.windSpeed} feelsLike={this.state.feelsLike} minTemp={this.state.minTemp} maxTemp={this.state.maxTemp} weatherName={this.state.weatherName} sunrise={this.state.sunrise} sunset={this.state.sunset} />\n        </div>\n        {/* <div>\n          <div className=\"d-flex col-12 py-1\">\n            {this.state.forecast.map(item => item.main.temp)}\n          </div>\n          <div className=\"d-flex col-12 py-1\">\n            {this.state.forecast.map(item => item.main.temp_max)}\n          </div>\n          <div className=\"d-flex col-12 py-1\">\n            {this.state.forecast.map(item => item.main.temp_min)}\n          </div>\n        </div> */}\n        <div className=\"App\">\n          {/* <header className=\"App-header\">\n            <h1>React Weather App</h1>\n          </header> */}\n          <main>\n            <Forecast />\n          </main>\n          <footer>\n            Page created by Vande Nikolovski\n      </footer>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}