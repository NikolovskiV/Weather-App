{"ast":null,"code":"var _jsxFileName = \"/Users/smekiboy/Desktop/weather/src/components/Search.js\";\nimport React from 'react';\nimport { Fragment } from 'react';\nimport APIKEY from '../api';\nimport Results from './Results';\nimport Button from './Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Search extends React.Component {\n  constructor() {\n    super();\n\n    this.validateInput = () => {\n      // console.log(this.inputSearch.current.value);\n      const value = this.inputSearch.current.value.trim();\n      value ? this.setState({\n        enableBtn: true\n      }) : this.setState({\n        enableBtn: false\n      }); // enable button if input field is not empty\n    };\n\n    this.search = () => {\n      // console.log('searched', this.inputSearch.current.value);\n      const city = this.inputSearch.current.value.trim();\n      fetch(`http://api.openweathermap.org/data/2.5/forecast?q=${city}&units=imperial&appid=${APIKEY}`, {\n        method: 'GET'\n      }).then(response => response.json()).then(json => {\n        // console.log('json', json);\n        // show results only if response is 200 (actual results returned from api)\n        if (json.cod === \"200\") {\n          const city = json.city;\n          this.setState(prevState => {\n            return {\n              showSearch: false,\n              showWhat: \"results\",\n              city: city.name,\n              country: city.country,\n              list: json.list,\n              categorizedList: this.categorizeResults(json.list)\n            };\n          });\n        } // if not found\n\n\n        if (json.cod === \"404\") {\n          this.setState({\n            showSearch: false,\n            showWhat: \"notFound\"\n          });\n        }\n\n        return false;\n      }).catch(error => {\n        console.log('error', error);\n      });\n    };\n\n    this.categorizeResults = list => {\n      // get an array of all the dates\n      // use values of that array to filter out the results\n      // console.log('list', this.state.list);\n      const dates = list.map((item, i) => {\n        return item.dt_txt.split(\" \")[0];\n      }).filter((item, i, currArr) => {\n        return currArr.indexOf(item) === i;\n      }); // console.log('dates', dates);\n      // create a new object with those dates as keys\n\n      let sortedResults = [];\n\n      for (let theDate of dates) {\n        sortedResults.push({\n          name: theDate,\n          weathers: []\n        });\n      } // for each item in the json.list\n\n\n      for (let item of list) {\n        let itemDate = item.dt_txt.split(\" \")[0]; // get the date in string form\n        //if sortedResults.name = itemDate then push that item into that sortedResult's weathers array\n\n        for (let result of sortedResults) {\n          if (result.name === itemDate) {\n            result.weathers.push(item);\n          }\n        }\n      } // console.log('sortedResults', sortedResults);\n\n\n      return sortedResults;\n    };\n\n    this.handleClear = () => {\n      this.setState({\n        showSearch: true,\n        enableBtn: false,\n        showWhat: \"\"\n      });\n    };\n\n    this.state = {\n      showSearch: true,\n      enableBtn: false,\n      showWhat: \"\",\n      name: \"\",\n      country: \"\",\n      list: [],\n      categorizedList: []\n    };\n    this.inputSearch = /*#__PURE__*/React.createRef(); // create reference to the <input> field\n  }\n\n  render() {\n    // console.log('state', this.state);\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [this.state.showSearch ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Search by city:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"New York\",\n          ref: this.inputSearch,\n          onKeyUp: this.validateInput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          isDisabled: !this.state.enableBtn,\n          clickHandler: this.search,\n          btnCopy: \"Get Forecast\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 25\n      }, this) : \"\", this.state.showWhat ? /*#__PURE__*/_jsxDEV(Results, {\n        showWhat: this.state.showWhat,\n        city: this.state.city,\n        country: this.state.country,\n        results: this.state.categorizedList,\n        handleClear: this.handleClear\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 25\n      }, this) : \"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/smekiboy/Desktop/weather/src/components/Search.js"],"names":["React","Fragment","APIKEY","Results","Button","Search","Component","constructor","validateInput","value","inputSearch","current","trim","setState","enableBtn","search","city","fetch","method","then","response","json","cod","prevState","showSearch","showWhat","name","country","list","categorizedList","categorizeResults","catch","error","console","log","dates","map","item","i","dt_txt","split","filter","currArr","indexOf","sortedResults","theDate","push","weathers","itemDate","result","handleClear","state","createRef","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Fragment } from 'react';\n\nimport APIKEY from '../api';\n\nimport Results from './Results';\nimport Button from './Button';\n\nexport default class Search extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            showSearch: true,\n            enableBtn: false,\n            showWhat: \"\",\n            name: \"\",\n            country: \"\",\n            list: [],\n            categorizedList: [],\n        }\n\n        this.inputSearch = React.createRef(); // create reference to the <input> field\n    }\n\n    validateInput = () => {\n        // console.log(this.inputSearch.current.value);\n        const value = this.inputSearch.current.value.trim();\n\n        value ? this.setState({ enableBtn: true }) : this.setState({ enableBtn: false }); // enable button if input field is not empty\n    }\n\n    search = () => {\n        // console.log('searched', this.inputSearch.current.value);\n        const city = this.inputSearch.current.value.trim();\n\n        fetch(`http://api.openweathermap.org/data/2.5/forecast?q=${city}&units=imperial&appid=${APIKEY}`,\n            { method: 'GET' })\n            .then(response => response.json())\n            .then(json => {\n                // console.log('json', json);\n\n                // show results only if response is 200 (actual results returned from api)\n                if (json.cod === \"200\") {\n                    const city = json.city;\n\n                    this.setState(prevState => {\n                        return {\n                            showSearch: false,\n                            showWhat: \"results\",\n                            city: city.name,\n                            country: city.country,\n                            list: json.list,\n                            categorizedList: this.categorizeResults(json.list)\n                        }\n                    });\n                }\n\n                // if not found\n                if (json.cod === \"404\") {\n                    this.setState({\n                        showSearch: false,\n                        showWhat: \"notFound\"\n                    });\n                }\n\n                return false;\n            })\n            .catch(error => {\n                console.log('error', error);\n            });\n    }\n\n    categorizeResults = (list) => {\n        // get an array of all the dates\n        // use values of that array to filter out the results\n\n        // console.log('list', this.state.list);\n\n        const dates = list\n            .map((item, i) => {\n                return item.dt_txt.split(\" \")[0];\n            })\n            .filter((item, i, currArr) => {\n                return currArr.indexOf(item) === i;\n            });\n\n        // console.log('dates', dates);\n\n        // create a new object with those dates as keys\n        let sortedResults = [];\n        for (let theDate of dates) {\n            sortedResults.push({\n                name: theDate,\n                weathers: []\n            });\n        }\n\n        // for each item in the json.list\n        for (let item of list) {\n            let itemDate = item.dt_txt.split(\" \")[0]; // get the date in string form\n\n            //if sortedResults.name = itemDate then push that item into that sortedResult's weathers array\n            for (let result of sortedResults) {\n                if (result.name === itemDate) {\n                    result.weathers.push(item);\n                }\n            }\n        }\n\n        // console.log('sortedResults', sortedResults);\n        return sortedResults;\n    }\n\n    handleClear = () => {\n        this.setState({\n            showSearch: true,\n            enableBtn: false,\n            showWhat: \"\"\n        });\n    }\n\n    render() {\n        // console.log('state', this.state);\n\n        return (\n            <Fragment>\n                {\n                    (this.state.showSearch) ?\n                        <div className=\"search-container\">\n                            <label>Search by city:</label>\n                            <input type=\"text\"\n                                placeholder=\"New York\"\n                                ref={this.inputSearch}\n                                onKeyUp={this.validateInput} />\n\n                            <Button\n                                isDisabled={!this.state.enableBtn}\n                                clickHandler={this.search}\n                                btnCopy=\"Get Forecast\" />\n                        </div>\n                        : \"\"\n                }\n\n                {\n                    (this.state.showWhat) ?\n                        <Results\n                            showWhat={this.state.showWhat}\n                            city={this.state.city}\n                            country={this.state.country}\n                            results={this.state.categorizedList}\n                            handleClear={this.handleClear} />\n                        : \"\"\n                }\n\n            </Fragment>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}