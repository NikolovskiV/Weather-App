"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.querify = void 0;
exports.querify = function (forecast) {
    var getTypeOfWeatherBy = function (compare) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, forecast.result()];
                case 1: return [2 /*return*/, (_a.sent()).reduce(function (p, c) {
                        if (Boolean(p)) {
                            return p;
                        }
                        return c.weather.weather.reduce(function (p, c) {
                            if (Boolean(p)) {
                                return p;
                            }
                            return compare(c) ? c : p;
                        }, null);
                    }, null)];
            }
        });
    }); };
    var getTypeOfWeather = function (main) { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
        return [2 /*return*/, getTypeOfWeatherBy(function (c) { return c.main === main; })];
    }); }); };
    var getIdOfWeather = function (id) { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
        return [2 /*return*/, getTypeOfWeatherBy(function (c) { return c.id === id; })];
    }); }); };
    var getMeasurement = function (measure) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, forecast.result()];
                case 1: return [2 /*return*/, (_a.sent()).map(measure).reduce(function (p, c) {
                        if (c !== undefined && p === null) {
                            return c;
                        }
                        return p;
                    }, null)];
            }
        });
    }); };
    var queries = {
        ashy: function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/, getTypeOfWeather('Ash')];
        }); }); },
        cloudy: function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/, getTypeOfWeather('Clouds')];
        }); }); },
        drizzle: function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/, getTypeOfWeather('Drizzle')];
        }); }); },
        rainy: function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/, getTypeOfWeather('Rain')];
        }); }); },
        snowy: function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/, getTypeOfWeather('Snow')];
        }); }); },
        sunny: function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/, getTypeOfWeather('Clear')];
        }); }); },
        stormy: function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/, getTypeOfWeather('Thunderstorm')];
        }); }); },
        misty: function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/, getTypeOfWeather('Mist')];
        }); }); },
        smoky: function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/, getTypeOfWeather('Smoke')];
        }); }); },
        hazy: function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/, getTypeOfWeather('Haze')];
        }); }); },
        dusty: function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/, getTypeOfWeather('Dust')];
        }); }); },
        foggy: function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/, getTypeOfWeather('Fog')];
        }); }); },
        sandy: function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/, getTypeOfWeather('Sand')];
        }); }); },
        squally: function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/, getTypeOfWeather('Squall')];
        }); }); },
        tornado: function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/, getTypeOfWeather('Tornado')];
        }); }); },
        day: function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/, getTypeOfWeather(undefined)];
        }); }); },
        clouds: function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/, getMeasurement(function (res) { return res.weather.clouds.all; })];
        }); }); },
        humidity: function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/, getMeasurement(function (res) { return res.address.main.humidity; })];
        }); }); },
        percipitation: function (mode, time) { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, getMeasurement(function (res) { return mode !== 'snow'
                        ? res.weather.rain[time || '1h']
                        : res.weather.snow[time || '1h']; })];
            });
        }); },
        pressure: function (type) { return getMeasurement(function (res) { return !type || type === 'default' ? res.address.main.pressure : (type === 'ground'
            ? res.address.main.grnd_level
            : res.address.main.sea_level); }); },
        rain: function (mode) { return getMeasurement(function (res) { return res.weather.rain && res.weather.rain[mode || '1h']; }); },
        snow: function (mode) { return getMeasurement(function (res) { return res.weather.snow && res.weather.snow[mode || '1h']; }); },
        sun: function (type) { return getMeasurement(function (res) { return (!type || type === 'rise')
            ? new Date(res.address.sun.sunrise)
            : new Date(res.address.sun.sunset); }); },
        temp: function (type) { return getMeasurement(function (res) {
            switch (type || 'exact') {
                case 'exact':
                    return res.address.main.temp;
                case 'feel':
                    return res.address.main.feels_like;
                case 'max':
                    return res.address.main.temp_max;
                case 'min':
                    return res.address.main.temp_min;
            }
        }); },
        visibility: function () { return getMeasurement(function (res) { return res.weather.visibility.value; }); },
        wind: function (type) { return getMeasurement(function (res) {
            switch (type || 'speed') {
                case 'speed':
                    return res.weather.wind.speed;
                case 'degree':
                    return res.weather.wind.deg;
                case 'gust':
                    return res.weather.wind.gust;
            }
        }); },
        is: function (what) { return __awaiter(void 0, void 0, void 0, function () {
            var results;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!what) return [3 /*break*/, 2];
                        return [4 /*yield*/, forecast.result()];
                    case 1:
                        results = (_a.sent()).find(function (res) { return res.weather.weather.length > 0; });
                        if (!results) {
                            return [2 /*return*/, null];
                        }
                        return [2 /*return*/, results.weather.weather[0]];
                    case 2:
                        if (typeof what === 'string') {
                            return [2 /*return*/, getTypeOfWeather(what)];
                        }
                        if (typeof what === 'number') {
                            return [2 /*return*/, getIdOfWeather(what)];
                        }
                        return [2 /*return*/, null];
                }
            });
        }); },
    };
    return __assign(__assign({}, forecast), queries);
};
