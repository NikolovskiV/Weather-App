"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.listModification = void 0;
var interval = function (begin, end, by) {
    var acc = [];
    var start = new Date(begin);
    while (start.getTime() < end.getTime()) {
        acc.push(new Date(start));
        if (by === 'day') {
            start.setDate(start.getDate() + 1);
        }
        else {
            start.setHours(start.getHours() + 1);
        }
    }
    if (start.getTime() <= end.getTime()) {
        acc.push(new Date(start));
    }
    return acc;
};
var syncPromises = function (array, applied) { return __awaiter(void 0, void 0, void 0, function () {
    var acc, i, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                acc = [];
                i = 0;
                _c.label = 1;
            case 1:
                if (!(i < array.length)) return [3 /*break*/, 4];
                _b = (_a = acc).push;
                return [4 /*yield*/, applied(array[i], i)];
            case 2:
                _b.apply(_a, [_c.sent()]);
                _c.label = 3;
            case 3:
                i++;
                return [3 /*break*/, 1];
            case 4: return [2 /*return*/, acc];
        }
    });
}); };
var resolveList = function (time, copied, iter) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, copied.result()];
            case 1:
                _a.sent();
                return [4 /*yield*/, syncPromises(time, function (unit, i) { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, iter(copied.at(unit, time[i + 1] || copied.dates[1]))];
                            case 1: return [2 /*return*/, ([_a.sent(), unit])];
                        }
                    }); }); })];
            case 2: return [2 /*return*/, (_a.sent()).filter(function (res) { return res[0] !== null; }).map(function (res) {
                    if (res[0] instanceof Date || typeof res[0] === 'number') {
                        return {
                            value: res[0],
                            date: res[1],
                        };
                    }
                    else {
                        return __assign(__assign({}, res[0]), { date: res[1] });
                    }
                })];
        }
    });
}); };
exports.listModification = function (forecast, by) {
    var copied = forecast.copy();
    var time = interval(copied.dates[0], copied.dates[1], by);
    var modify = {
        ashy: function () { return resolveList(time, copied, function (forec) { return forec.ashy(); }); },
        rainy: function () { return resolveList(time, copied, function (forec) { return forec.rainy(); }); },
        drizzle: function () { return resolveList(time, copied, function (forec) { return forec.drizzle(); }); },
        sunny: function () { return resolveList(time, copied, function (forec) { return forec.sunny(); }); },
        cloudy: function () { return resolveList(time, copied, function (forec) { return forec.cloudy(); }); },
        stormy: function () { return resolveList(time, copied, function (forec) { return forec.stormy(); }); },
        misty: function () { return resolveList(time, copied, function (forec) { return forec.misty(); }); },
        smoky: function () { return resolveList(time, copied, function (forec) { return forec.smoky(); }); },
        hazy: function () { return resolveList(time, copied, function (forec) { return forec.hazy(); }); },
        dusty: function () { return resolveList(time, copied, function (forec) { return forec.dusty(); }); },
        foggy: function () { return resolveList(time, copied, function (forec) { return forec.foggy(); }); },
        sandy: function () { return resolveList(time, copied, function (forec) { return forec.sandy(); }); },
        squally: function () { return resolveList(time, copied, function (forec) { return forec.squally(); }); },
        tornado: function () { return resolveList(time, copied, function (forec) { return forec.tornado(); }); },
        snowy: function () { return resolveList(time, copied, function (forec) { return forec.snowy(); }); },
        day: function () { return resolveList(time, copied, function (forec) { return forec.day(); }); },
        is: function (what) { return resolveList(time, copied, function (forec) { return forec.is(what); }); },
        temp: function (type) { return resolveList(time, copied, function (forec) { return forec.temp(type); }); },
        pressure: function (type) { return resolveList(time, copied, function (forec) { return forec.pressure(type); }); },
        humidity: function () { return resolveList(time, copied, function (forec) { return forec.humidity(); }); },
        clouds: function () { return resolveList(time, copied, function (forec) { return forec.clouds(); }); },
        visibility: function () { return resolveList(time, copied, function (forec) { return forec.visibility(); }); },
        percipitation: function (mode, hour) { return resolveList(time, copied, function (forec) { return forec.percipitation(mode, hour); }); },
        wind: function (type) { return resolveList(time, copied, function (forec) { return forec.wind(type); }); },
        rain: function (when) { return resolveList(time, copied, function (forec) { return forec.rain(when); }); },
        snow: function (when) { return resolveList(time, copied, function (forec) { return forec.snow(when); }); },
        sun: function (what) { return resolveList(time, copied, function (forec) { return forec.sun(what); }); },
    };
    return modify;
};
