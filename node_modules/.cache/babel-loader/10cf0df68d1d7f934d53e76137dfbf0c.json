{"ast":null,"code":"\"use strict\";\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UnifyApiResponse = void 0;\n\nvar util_1 = require(\"./util\");\n/**\n * Convert to local time using util\n * @param date Date in seconds\n * @param timezone Possible timezone\n */\n\n\nvar convertToLocal = function (date, timezone) {\n  return !date ? 0 : util_1.getLocalFromUtc((date + (timezone || 0)) * 1000);\n};\n\nvar getDailyResponse = function (response, isToday) {\n  return {\n    address: {\n      coord: response.coord,\n      country: response.sys ? response.sys.country : '',\n      id: response.id,\n      name: response.name,\n      main: response.main,\n      population: 0,\n      sun: {\n        sunrise: response.sys ? convertToLocal(response.sys.sunrise, response.timezone) : 0,\n        sunset: response.sys ? convertToLocal(response.sys.sunrise, response.timezone) : 0\n      },\n      timezone: response.timezone || 0\n    },\n    weather: {\n      clouds: response.clouds,\n      dt: isToday ? util_1.today().getTime() : convertToLocal(response.dt, response.timezone),\n      dt_txt: '',\n      precipitation: {\n        mode: response.rain && response.rain['1h'] ? 'rain' : response.snow && response.snow['1h'] ? 'snow' : 'no',\n        value: response.rain && response.rain['1h'] ? response.rain['1h'] : response.snow && response.snow['1h'] ? response.snow['1h'] : 0\n      },\n      rain: {\n        '1h': response.rain && response.rain['1h'] ? response.rain['1h'] : 0,\n        '3h': response.rain && response.rain['3h'] ? response.rain['3h'] : 0\n      },\n      snow: {\n        '1h': response.snow && response.snow['1h'] ? response.snow['1h'] : 0,\n        '3h': response.snow && response.snow['3h'] ? response.snow['3h'] : 0\n      },\n      sys: response.sys || {},\n      visibility: {\n        value: response.visibility\n      },\n      weather: response.weather,\n      wind: response.wind\n    }\n  };\n};\n\nexports.UnifyApiResponse = function (response) {\n  switch (response.kind) {\n    case 'daily':\n      return [getDailyResponse(response, true)];\n\n    case 'group':\n      return response.list.map(function (response) {\n        return getDailyResponse(response);\n      });\n\n    case 'hourly':\n      return response.list.map(function (item) {\n        return {\n          address: {\n            coord: response.city.coord,\n            country: response.country,\n            id: response.city.id,\n            name: response.city.name,\n            population: response.population,\n            sun: {\n              sunrise: convertToLocal(response.sunrise, response.timezone),\n              sunset: convertToLocal(response.sunset, response.timezone)\n            },\n            timezone: response.timezone || 0,\n            main: item.main\n          },\n          weather: {\n            clouds: {\n              all: item.clouds.all\n            },\n            dt: convertToLocal(item.dt, response.timezone),\n            dt_txt: '',\n            precipitation: {\n              mode: item.rain && item.rain['1h'] ? 'rain' : item.snow && item.snow['1h'] ? 'snow' : 'no',\n              value: item.rain && item.rain['1h'] ? item.rain['1h'] : item.snow && item.snow['1h'] ? item.snow['1h'] : 0\n            },\n            rain: {\n              '1h': item.rain && item.rain['1h'] ? item.rain['1h'] : 0,\n              '3h': 0\n            },\n            snow: {\n              '1h': item.snow && item.snow['1h'] ? item.snow['1h'] : 0,\n              '3h': 0\n            },\n            sys: {},\n            visibility: {\n              value: 0\n            },\n            weather: item.weather,\n            wind: {\n              deg: item.wind.deg,\n              speed: item.wind.speed,\n              gust: 0\n            }\n          },\n          wind: {\n            degree: item.wind.deg,\n            speed: item.wind.speed,\n            gust: 0\n          }\n        };\n      });\n\n    case '5day':\n      return response.list.map(function (item) {\n        return {\n          address: {\n            coord: response.city.coord,\n            country: response.city.country,\n            id: response.city.id,\n            name: response.city.name,\n            population: 0,\n            sun: {\n              sunrise: convertToLocal(response.city.sunrise, response.city.timezone),\n              sunset: convertToLocal(response.city.sunset, response.city.timezone)\n            },\n            timezone: response.city.timezone || 0,\n            main: item.main\n          },\n          weather: {\n            clouds: item.clouds,\n            dt: convertToLocal(item.dt, response.city.timezone),\n            dt_txt: '',\n            precipitation: {\n              mode: item.rain && item.rain['3h'] ? 'rain' : item.snow && item.snow['3h'] ? 'snow' : 'no',\n              value: item.rain && item.rain['3h'] ? item.rain['3h'] : item.snow && item.snow['3h'] ? item.snow['3h'] : 0\n            },\n            rain: {\n              '1h': 0,\n              '3h': item.rain && item.rain['3h'] ? item.rain['3h'] : 0\n            },\n            snow: {\n              '1h': 0,\n              '3h': item.snow && item.snow['3h'] ? item.snow['3h'] : 0\n            },\n            sys: {},\n            visibility: {\n              value: 0\n            },\n            weather: item.weather,\n            wind: {\n              deg: item.wind.deg,\n              speed: item.wind.speed,\n              gust: 0\n            }\n          },\n          wind: {\n            degree: item.wind.deg,\n            speed: item.wind.speed,\n            gust: 0\n          }\n        };\n      });\n\n    case '16day':\n    case '30day':\n      return response.list.map(function (item) {\n        return {\n          address: {\n            coord: response.city.coord,\n            country: response.country,\n            id: response.city.id,\n            name: response.city.name,\n            population: 0,\n            sun: {\n              sunrise: convertToLocal(item.sunrise, response.timezone),\n              sunset: convertToLocal(item.sunset, response.timezone)\n            },\n            timezone: response.timezone || 0,\n            main: {\n              feels_like: item.feels_like ? item.feels_like.day : item.temp.day,\n              grnd_level: item.pressure,\n              sea_level: item.pressure,\n              pressure: item.pressure,\n              humidity: item.humidity,\n              temp: item.temp.day,\n              temp_max: item.temp.max,\n              temp_min: item.temp.min\n            }\n          },\n          weather: {\n            clouds: {\n              all: item.clouds\n            },\n            dt: convertToLocal(item.dt, response.timezone),\n            dt_txt: '',\n            precipitation: {\n              mode: item.rain ? 'rain' : item.snow ? 'snow' : 'no',\n              value: item.rain ? item.rain : item.snow ? item.snow : 0\n            },\n            rain: {\n              '1h': item.rain,\n              '3h': 0\n            },\n            snow: {\n              '1h': item.snow,\n              '3h': 0\n            },\n            wind: {\n              deg: item.deg,\n              speed: item.speed,\n              gust: 0\n            },\n            sys: {},\n            visibility: {\n              value: 0\n            },\n            weather: item.weather\n          }\n        };\n      });\n\n    case 'onecall':\n      return __spreadArrays(__spreadArrays([response.current], response.hourly || []).map(function (item) {\n        return {\n          address: {\n            coord: {\n              lat: response.lat,\n              lon: response.lon\n            },\n            country: 'en',\n            id: 0,\n            name: '',\n            population: 0,\n            sun: {\n              sunrise: convertToLocal(response.current.sunrise, response.timezone_offset),\n              sunset: convertToLocal(response.current.sunset, response.timezone_offset)\n            },\n            timezone: response.timezone_offset || 0,\n            main: {\n              feels_like: item.feels_like,\n              grnd_level: item.pressure,\n              sea_level: item.pressure,\n              pressure: item.pressure,\n              humidity: item.humidity,\n              temp: item.temp,\n              temp_max: item.temp,\n              temp_min: item.temp\n            }\n          },\n          weather: {\n            clouds: {\n              all: item.clouds\n            },\n            dt: convertToLocal(item.dt, response.timezone_offset),\n            dt_txt: '',\n            precipitation: {\n              mode: item.rain && item.rain['1h'] ? 'rain' : item.snow && item.snow['1h'] ? 'snow' : 'no',\n              value: item.rain && item.rain['1h'] ? item.rain['1h'] : item.snow && item.snow['1h'] ? item.snow['1h'] : 0\n            },\n            rain: {\n              '1h': item.rain && item.rain['1h'] ? item.rain['1h'] : 0,\n              '3h': 0\n            },\n            snow: {\n              '1h': item.snow && item.snow['1h'] ? item.snow['1h'] : 0,\n              '3h': 0\n            },\n            sys: {},\n            visibility: {\n              value: item.visibility\n            },\n            weather: item.weather,\n            wind: {\n              speed: item.wind_speed,\n              deg: item.wind_deg,\n              gust: item.wind_gust || 0\n            }\n          }\n        };\n      }), response.daily ? response.daily.map(function (item) {\n        return {\n          address: {\n            coord: {\n              lat: response.lat,\n              lon: response.lon\n            },\n            country: 'en',\n            id: 0,\n            name: '',\n            population: 0,\n            sun: {\n              sunrise: convertToLocal(item.sunrise, response.timezone_offset),\n              sunset: convertToLocal(item.sunset, response.timezone_offset)\n            },\n            timezone: response.timezone_offset || 0,\n            main: {\n              feels_like: item.feels_like.day,\n              grnd_level: item.pressure,\n              sea_level: item.pressure,\n              pressure: item.pressure,\n              humidity: item.humidity,\n              temp: item.temp.day,\n              temp_max: item.temp.max,\n              temp_min: item.temp.min\n            }\n          },\n          weather: {\n            clouds: {\n              all: item.clouds\n            },\n            dt: convertToLocal(item.dt, response.timezone_offset),\n            dt_txt: '',\n            precipitation: {\n              mode: item.rain ? 'rain' : item.snow ? 'snow' : 'no',\n              value: item.rain ? item.rain : item.snow ? item.snow : 0\n            },\n            rain: {\n              '1h': item.rain ? item.rain : 0,\n              '3h': 0\n            },\n            snow: {\n              '1h': item.snow ? item.snow : 0,\n              '3h': 0\n            },\n            sys: {},\n            visibility: {\n              value: item.visibility\n            },\n            weather: item.weather,\n            wind: {\n              speed: item.wind_speed,\n              deg: item.wind_deg,\n              gust: item.wind_gust || 0\n            }\n          }\n        };\n      }) : []);\n  }\n};","map":{"version":3,"sources":["/Users/smekiboy/Desktop/weather/node_modules/forecast-query/weather/unification.js"],"names":["__spreadArrays","s","i","il","arguments","length","r","Array","k","a","j","jl","Object","defineProperty","exports","value","UnifyApiResponse","util_1","require","convertToLocal","date","timezone","getLocalFromUtc","getDailyResponse","response","isToday","address","coord","country","sys","id","name","main","population","sun","sunrise","sunset","weather","clouds","dt","today","getTime","dt_txt","precipitation","mode","rain","snow","visibility","wind","kind","list","map","item","city","all","deg","speed","gust","degree","feels_like","day","temp","grnd_level","pressure","sea_level","humidity","temp_max","max","temp_min","min","current","hourly","lat","lon","timezone_offset","wind_speed","wind_deg","wind_gust","daily"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UnifyApiResponse = void 0;\nvar util_1 = require(\"./util\");\n/**\n * Convert to local time using util\n * @param date Date in seconds\n * @param timezone Possible timezone\n */\nvar convertToLocal = function (date, timezone) { return !date\n    ? 0\n    : (util_1.getLocalFromUtc((date + (timezone || 0)) * 1000)); };\nvar getDailyResponse = function (response, isToday) { return ({\n    address: {\n        coord: response.coord,\n        country: response.sys ? response.sys.country : '',\n        id: response.id,\n        name: response.name,\n        main: response.main,\n        population: 0,\n        sun: {\n            sunrise: response.sys ? convertToLocal(response.sys.sunrise, response.timezone) : 0,\n            sunset: response.sys ? convertToLocal(response.sys.sunrise, response.timezone) : 0,\n        },\n        timezone: response.timezone || 0,\n    },\n    weather: {\n        clouds: response.clouds,\n        dt: isToday ? util_1.today().getTime() : convertToLocal(response.dt, response.timezone),\n        dt_txt: '',\n        precipitation: {\n            mode: response.rain && response.rain['1h'] ? 'rain' : (response.snow && response.snow['1h'] ? 'snow' : 'no'),\n            value: response.rain && response.rain['1h'] ? response.rain['1h'] : (response.snow && response.snow['1h'] ? response.snow['1h'] : 0),\n        },\n        rain: {\n            '1h': response.rain && response.rain['1h'] ? response.rain['1h'] : 0,\n            '3h': response.rain && response.rain['3h'] ? response.rain['3h'] : 0,\n        },\n        snow: {\n            '1h': response.snow && response.snow['1h'] ? response.snow['1h'] : 0,\n            '3h': response.snow && response.snow['3h'] ? response.snow['3h'] : 0,\n        },\n        sys: response.sys || {},\n        visibility: {\n            value: response.visibility,\n        },\n        weather: response.weather,\n        wind: response.wind,\n    },\n}); };\nexports.UnifyApiResponse = function (response) {\n    switch (response.kind) {\n        case 'daily':\n            return [getDailyResponse(response, true)];\n        case 'group':\n            return response.list.map(function (response) { return getDailyResponse(response); });\n        case 'hourly':\n            return response.list.map(function (item) { return ({\n                address: {\n                    coord: response.city.coord,\n                    country: response.country,\n                    id: response.city.id,\n                    name: response.city.name,\n                    population: response.population,\n                    sun: {\n                        sunrise: convertToLocal(response.sunrise, response.timezone),\n                        sunset: convertToLocal(response.sunset, response.timezone),\n                    },\n                    timezone: response.timezone || 0,\n                    main: item.main,\n                },\n                weather: {\n                    clouds: {\n                        all: item.clouds.all,\n                    },\n                    dt: convertToLocal(item.dt, response.timezone),\n                    dt_txt: '',\n                    precipitation: {\n                        mode: item.rain && item.rain['1h'] ? 'rain' : (item.snow && item.snow['1h'] ? 'snow' : 'no'),\n                        value: item.rain && item.rain['1h'] ? item.rain['1h'] : (item.snow && item.snow['1h'] ? item.snow['1h'] : 0),\n                    },\n                    rain: {\n                        '1h': item.rain && item.rain['1h'] ? item.rain['1h'] : 0,\n                        '3h': 0,\n                    },\n                    snow: {\n                        '1h': item.snow && item.snow['1h'] ? item.snow['1h'] : 0,\n                        '3h': 0,\n                    },\n                    sys: {},\n                    visibility: {\n                        value: 0,\n                    },\n                    weather: item.weather,\n                    wind: {\n                        deg: item.wind.deg,\n                        speed: item.wind.speed,\n                        gust: 0,\n                    },\n                },\n                wind: {\n                    degree: item.wind.deg,\n                    speed: item.wind.speed,\n                    gust: 0,\n                },\n            }); });\n        case '5day':\n            return response.list.map(function (item) { return ({\n                address: {\n                    coord: response.city.coord,\n                    country: response.city.country,\n                    id: response.city.id,\n                    name: response.city.name,\n                    population: 0,\n                    sun: {\n                        sunrise: convertToLocal(response.city.sunrise, response.city.timezone),\n                        sunset: convertToLocal(response.city.sunset, response.city.timezone),\n                    },\n                    timezone: response.city.timezone || 0,\n                    main: item.main,\n                },\n                weather: {\n                    clouds: item.clouds,\n                    dt: convertToLocal(item.dt, response.city.timezone),\n                    dt_txt: '',\n                    precipitation: {\n                        mode: item.rain && item.rain['3h'] ? 'rain' : (item.snow && item.snow['3h'] ? 'snow' : 'no'),\n                        value: item.rain && item.rain['3h'] ? item.rain['3h'] : (item.snow && item.snow['3h'] ? item.snow['3h'] : 0),\n                    },\n                    rain: {\n                        '1h': 0,\n                        '3h': item.rain && item.rain['3h'] ? item.rain['3h'] : 0,\n                    },\n                    snow: {\n                        '1h': 0,\n                        '3h': item.snow && item.snow['3h'] ? item.snow['3h'] : 0,\n                    },\n                    sys: {},\n                    visibility: {\n                        value: 0,\n                    },\n                    weather: item.weather,\n                    wind: {\n                        deg: item.wind.deg,\n                        speed: item.wind.speed,\n                        gust: 0,\n                    },\n                },\n                wind: {\n                    degree: item.wind.deg,\n                    speed: item.wind.speed,\n                    gust: 0,\n                },\n            }); });\n        case '16day':\n        case '30day':\n            return response.list.map(function (item) { return ({\n                address: {\n                    coord: response.city.coord,\n                    country: response.country,\n                    id: response.city.id,\n                    name: response.city.name,\n                    population: 0,\n                    sun: {\n                        sunrise: convertToLocal(item.sunrise, response.timezone),\n                        sunset: convertToLocal(item.sunset, response.timezone),\n                    },\n                    timezone: response.timezone || 0,\n                    main: {\n                        feels_like: item.feels_like ? item.feels_like.day : item.temp.day,\n                        grnd_level: item.pressure,\n                        sea_level: item.pressure,\n                        pressure: item.pressure,\n                        humidity: item.humidity,\n                        temp: item.temp.day,\n                        temp_max: item.temp.max,\n                        temp_min: item.temp.min,\n                    },\n                },\n                weather: {\n                    clouds: {\n                        all: item.clouds,\n                    },\n                    dt: convertToLocal(item.dt, response.timezone),\n                    dt_txt: '',\n                    precipitation: {\n                        mode: item.rain ? 'rain' : (item.snow ? 'snow' : 'no'),\n                        value: item.rain ? item.rain : (item.snow ? item.snow : 0),\n                    },\n                    rain: {\n                        '1h': item.rain,\n                        '3h': 0,\n                    },\n                    snow: {\n                        '1h': item.snow,\n                        '3h': 0,\n                    },\n                    wind: {\n                        deg: item.deg,\n                        speed: item.speed,\n                        gust: 0,\n                    },\n                    sys: {},\n                    visibility: {\n                        value: 0,\n                    },\n                    weather: item.weather,\n                },\n            }); });\n        case 'onecall':\n            return __spreadArrays(__spreadArrays([response.current], (response.hourly || [])).map(function (item) { return ({\n                address: {\n                    coord: {\n                        lat: response.lat,\n                        lon: response.lon,\n                    },\n                    country: 'en',\n                    id: 0,\n                    name: '',\n                    population: 0,\n                    sun: {\n                        sunrise: convertToLocal(response.current.sunrise, response.timezone_offset),\n                        sunset: convertToLocal(response.current.sunset, response.timezone_offset),\n                    },\n                    timezone: response.timezone_offset || 0,\n                    main: {\n                        feels_like: item.feels_like,\n                        grnd_level: item.pressure,\n                        sea_level: item.pressure,\n                        pressure: item.pressure,\n                        humidity: item.humidity,\n                        temp: item.temp,\n                        temp_max: item.temp,\n                        temp_min: item.temp,\n                    }\n                },\n                weather: {\n                    clouds: {\n                        all: item.clouds,\n                    },\n                    dt: convertToLocal(item.dt, response.timezone_offset),\n                    dt_txt: '',\n                    precipitation: {\n                        mode: item.rain && item.rain['1h'] ? 'rain' : (item.snow && item.snow['1h'] ? 'snow' : 'no'),\n                        value: item.rain && item.rain['1h'] ? item.rain['1h'] : (item.snow && item.snow['1h'] ? item.snow['1h'] : 0),\n                    },\n                    rain: {\n                        '1h': item.rain && item.rain['1h'] ? item.rain['1h'] : 0,\n                        '3h': 0,\n                    },\n                    snow: {\n                        '1h': item.snow && item.snow['1h'] ? item.snow['1h'] : 0,\n                        '3h': 0,\n                    },\n                    sys: {},\n                    visibility: {\n                        value: item.visibility,\n                    },\n                    weather: item.weather,\n                    wind: {\n                        speed: item.wind_speed,\n                        deg: item.wind_deg,\n                        gust: item.wind_gust || 0,\n                    }\n                },\n            }); }), (response.daily ? response.daily.map(function (item) { return ({\n                address: {\n                    coord: {\n                        lat: response.lat,\n                        lon: response.lon,\n                    },\n                    country: 'en',\n                    id: 0,\n                    name: '',\n                    population: 0,\n                    sun: {\n                        sunrise: convertToLocal(item.sunrise, response.timezone_offset),\n                        sunset: convertToLocal(item.sunset, response.timezone_offset),\n                    },\n                    timezone: response.timezone_offset || 0,\n                    main: {\n                        feels_like: item.feels_like.day,\n                        grnd_level: item.pressure,\n                        sea_level: item.pressure,\n                        pressure: item.pressure,\n                        humidity: item.humidity,\n                        temp: item.temp.day,\n                        temp_max: item.temp.max,\n                        temp_min: item.temp.min,\n                    }\n                },\n                weather: {\n                    clouds: {\n                        all: item.clouds,\n                    },\n                    dt: convertToLocal(item.dt, response.timezone_offset),\n                    dt_txt: '',\n                    precipitation: {\n                        mode: item.rain ? 'rain' : (item.snow ? 'snow' : 'no'),\n                        value: item.rain ? item.rain : (item.snow ? item.snow : 0),\n                    },\n                    rain: {\n                        '1h': item.rain ? item.rain : 0,\n                        '3h': 0,\n                    },\n                    snow: {\n                        '1h': item.snow ? item.snow : 0,\n                        '3h': 0,\n                    },\n                    sys: {},\n                    visibility: {\n                        value: item.visibility,\n                    },\n                    weather: item.weather,\n                    wind: {\n                        speed: item.wind_speed,\n                        deg: item.wind_deg,\n                        gust: item.wind_gust || 0,\n                    }\n                },\n            }); }) : []));\n    }\n};\n"]},"metadata":{},"sourceType":"script"}