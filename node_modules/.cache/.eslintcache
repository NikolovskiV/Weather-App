[{"/Users/smekiboy/Desktop/weather/src/index.js":"1","/Users/smekiboy/Desktop/weather/src/App.js":"2","/Users/smekiboy/Desktop/weather/src/weatherinfo.js":"3","/Users/smekiboy/Desktop/weather/src/Navbar.js":"4","/Users/smekiboy/Desktop/weather/src/components/WeatherCard.js":"5","/Users/smekiboy/Desktop/weather/src/components/CitySelector.js":"6","/Users/smekiboy/Desktop/weather/src/apis/config.js":"7","/Users/smekiboy/Desktop/weather/src/hooks/UseFetch.js":"8","/Users/smekiboy/Desktop/weather/src/Forecast.js":"9","/Users/smekiboy/Desktop/weather/src/components/WeatherList.js":"10","/Users/smekiboy/Desktop/weather/src/WeekContainer.js":"11","/Users/smekiboy/Desktop/weather/src/apiKeys.js":"12","/Users/smekiboy/Desktop/weather/src/DayCard.js":"13","/Users/smekiboy/Desktop/weather/src/DegreeToggle.js":"14"},{"size":479,"mtime":1620841800580,"results":"15","hashOfConfig":"16"},{"size":4807,"mtime":1620992476292,"results":"17","hashOfConfig":"16"},{"size":3560,"mtime":1620822171094,"results":"18","hashOfConfig":"16"},{"size":185,"mtime":1620886459909,"results":"19","hashOfConfig":"16"},{"size":1118,"mtime":1620993000974,"results":"20","hashOfConfig":"16"},{"size":929,"mtime":1620843383366,"results":"21","hashOfConfig":"16"},{"size":120,"mtime":1620897660715,"results":"22","hashOfConfig":"16"},{"size":1031,"mtime":1620885630549,"results":"23","hashOfConfig":"16"},{"size":936,"mtime":1620897297632,"results":"24","hashOfConfig":"16"},{"size":640,"mtime":1620993372059,"results":"25","hashOfConfig":"16"},{"size":1815,"mtime":1621065337639,"results":"26","hashOfConfig":"16"},{"size":95,"mtime":1620907623481,"results":"27","hashOfConfig":"16"},{"size":1064,"mtime":1620986280330,"results":"28","hashOfConfig":"16"},{"size":1270,"mtime":1620986547594,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"rehdqo",{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/smekiboy/Desktop/weather/src/index.js",[],["62","63"],"/Users/smekiboy/Desktop/weather/src/App.js",["64","65","66","67"],"// import logo from './logo.svg';\nimport React, { Component, useEffect, useState } from 'react';\nimport './App.css';\nimport Clock from 'react-live-clock';\nimport WeatherInfo from './weatherinfo';\nimport { getSunrise, getSunset } from 'sunrise-sunset-js';\nimport Navbar from './Navbar';\nimport Forecast from './Forecast';\nimport WeekContainer from './WeekContainer';\n// import CitySelector from './components/CitySelector';\n// import { Container } from 'react-bootstrap';\n// import UseFetch from './hooks/UseFetch';\n// import { API_KEY, API_BASE_URL } from './apis/config';\n\nclass App extends React.Component {\n\n  state = {\n    latitude: null,\n    longitude: null,\n    temp: null,\n    locationName: null,\n    country: null,\n    humidity: null,\n    visibility: null,\n    windSpeed: null,\n    feelsLike: null,\n    minTemp: null,\n    maxTemp: null,\n    weatherName: null,\n    sunrise: null,\n    sunset: null,\n    forecast: [],\n    fahrenheit: null,\n    celsius: null\n  }\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      this.getPostions()\n        .then((position) => {\n          console.log(position.coords.latitude);\n          // this.setState({ latitude: position.coords.latitude })\n          this.getWeather(position.coords.latitude, position.coords.longitude)\n          this.getForecast(position.coords.latitude, position.coords.longitude);\n        })\n    }\n  }\n\n  // fetchLocationDay = async => {\n  //   const today = new DateTime.now();\n  //   for (let i = 0; i < 7; i++) {\n  //     a\n  //   }\n  // }\n\n  getPostions = () => {\n    return new Promise(function (resolve, reject) {\n      navigator.geolocation.getCurrentPosition(resolve, reject);\n    });\n  };\n  // api.openweathermap.org/data/2.5/forecast?lat={lat}&lon={lon}&appid={API key}\n  getWeather = async (latitude, longitude) => {\n    const api = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&units=metric&appid=38ff886a4e3b7104f324a6067130ef6a`\n    );\n\n    const data = await api.json();\n    console.log(data);\n    const sunset = getSunset(latitude, longitude);\n    const sunrise = getSunrise(latitude, longitude);\n    console.log(toString(sunset));\n    this.setState(\n      {\n        temp: Math.round(data.main.temp),\n        locationName: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        visibility: data.visibility,\n        windSpeed: data.wind.speed,\n        feelsLike: Math.round(data.main.feels_like),\n        minTemp: Math.round(data.main.temp_min),\n        maxTemp: Math.round(data.main.temp_max),\n        weatherName: data.weather[0].main,\n        sunrise: data.sys.sunrise,\n        sunset: data.sys.sunset\n      }\n    )\n  }\n\n  getForecast = async (latitude, longitude) => {\n    const api = await fetch(\n      `https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&units=metric&appid=38ff886a4e3b7104f324a6067130ef6a`\n    );\n\n    const data = await api.json();\n    console.log(data);\n    this.setState(\n      {\n        forecast: data.list\n      }\n    )\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Navbar />\n        <div className=\"col-16 d-flex justify-content-center py-5\">\n          <div className=\"col-6 app-bg d-flex flex-wrap py-3\">\n            <div className=\"col-12\">\n              <h2 className=\"text-white m-0\">{(this.state.locationName)}</h2>\n              <p className=\"text-white\">{(this.state.country)}</p>\n            </div>\n            <div className=\"col-12 mt-auto d-flex\">\n              <div className=\"my-auto\">\n                <h2 className=\"text-white m-0\"><Clock format={'HH:mm:ss'} ticking={true} /></h2>\n                <p className=\"text-white m-0\">\n                  <Clock date={''} format={'dddd, MMMM DD, YYYY'} />\n                </p>\n              </div>\n              <div className=\"ml-auto\">\n                <h1 className=\"text-white\">{(this.state.temp)}Â°C</h1>\n              </div>\n            </div>\n          </div>\n          <WeatherInfo humidity={this.state.humidity} visibility={this.state.visibility} windSpeed={this.state.windSpeed} feelsLike={this.state.feelsLike} minTemp={this.state.minTemp} maxTemp={this.state.maxTemp} weatherName={this.state.weatherName} sunrise={this.state.sunrise} sunset={this.state.sunset} />\n        </div>\n\n        <div>\n          <Forecast />\n        </div>\n\n        <div className=\"App\">\n          <WeekContainer />\n        </div>\n\n        {/* <div>\n          {this.state.forecast.map(item => item.main.temp)}\n          {this.state.forecast.map(item => item.main.temp_max)}\n          {this.state.forecast.map(item => item.main.temp_max)}\n        </div> */}\n        <div className=\"footer\">\n          Created by Vande Nikolovski\n            </div>\n      </React.Fragment>\n\n    );\n  }\n}\n\nexport default App;\n","/Users/smekiboy/Desktop/weather/src/weatherinfo.js",["68"],"import React from 'react';\nimport ReactAnimatedWeather from 'react-animated-weather';\n// import { Fragment } from 'react';\n// import { Search } from 'react-search';\n\n\nconst defaults = {\n    icon: 'CLEAR_DAY',\n    color: 'white',\n    size: 100,\n    animate: true\n};\n\n\nfunction WeatherInfo(props) {\n    var weatherIcon;\n    switch (props.weatherName) {\n        case \"Clear\":\n            weatherIcon = 'CLEAR_DAY';\n            break;\n        case \"Rain\":\n            weatherIcon = \"RAIN\";\n            break;\n        case \"Rain\":\n            weatherIcon = \"CLOUDY\";\n            break;\n        default:\n            weatherIcon = 'CLEAR_DAY'\n    }\n    return (\n        <React.Fragment>\n            <div className=\"col-4 side-bg text-center py-3\">\n                <ReactAnimatedWeather\n                    icon={weatherIcon}\n                    color={defaults.color}\n                    size={defaults.size}\n                    animate={defaults.animate}\n                />\n                <h2 className=\"text-white py-2\">{props.weatherName}</h2>\n                <div className=\"d-flex flex-wrap\">\n                    <div className=\"d-flex col-12 py-2\">\n                        <div className=\"text-white\"><strong>Humidity</strong></div>\n                        <div className=\"text-white ml-auto\">{props.humidity}%</div>\n                    </div>\n                    <div className=\"d-flex col-12 py-1\">\n                        <div className=\"text-white\"><strong>Visiblity</strong></div>\n                        <div className=\"text-white ml-auto\">{props.visibility} mi</div>\n                    </div>\n                    <div className=\"d-flex col-12 py-1\">\n                        <div className=\"text-white\"><strong>Wind Speed</strong></div>\n                        <div className=\"text-white ml-auto\">{props.windSpeed} km/h</div>\n                    </div>\n                    <div className=\"d-flex col-12 py-1\">\n                        <div className=\"text-white\"><strong>Feels Like</strong></div>\n                        <div className=\"text-white ml-auto\">{props.feelsLike} Â°C</div>\n                    </div>\n                    <div className=\"d-flex col-12 py-1\">\n                        <div className=\"text-white\"><strong>Min Temp</strong></div>\n                        <div className=\"text-white ml-auto\">{props.minTemp} Â°C</div>\n                    </div>\n                    <div className=\"d-flex col-12 py-1\">\n                        <div className=\"text-white\"><strong>Max Temp</strong></div>\n                        <div className=\"text-white ml-auto\">{props.maxTemp} Â°C</div>\n                    </div>\n                    <div className=\"d-flex col-12 py-1\">\n                        <div className=\"text-white\"><strong>Sunrise</strong></div>\n                        <div className=\"text-white ml-auto\">{new Date(props.sunrise * 1000).toLocaleTimeString(\n                            \"sv-SE\"\n                        )} h</div>\n                    </div>\n                    <div className=\"d-flex col-12 py-1\">\n                        <div className=\"text-white\"><strong>Sunset</strong></div>\n                        <div className=\"text-white ml-auto\">{new Date(props.sunset * 1000).toLocaleTimeString(\n                            \"sv-SE\"\n                        )} h</div>\n                    </div>\n                </div>\n            </div>\n            {/* <div>\n                <Fragment>\n                    <Search />\n                </Fragment>\n            </div> */}\n        </React.Fragment>\n    );\n}\n\nexport default WeatherInfo;","/Users/smekiboy/Desktop/weather/src/Navbar.js",[],"/Users/smekiboy/Desktop/weather/src/components/WeatherCard.js",[],"/Users/smekiboy/Desktop/weather/src/components/CitySelector.js",[],"/Users/smekiboy/Desktop/weather/src/apis/config.js",[],"/Users/smekiboy/Desktop/weather/src/hooks/UseFetch.js",[],"/Users/smekiboy/Desktop/weather/src/Forecast.js",[],"/Users/smekiboy/Desktop/weather/src/components/WeatherList.js",[],"/Users/smekiboy/Desktop/weather/src/WeekContainer.js",[],"/Users/smekiboy/Desktop/weather/src/apiKeys.js",[],["69","70"],"/Users/smekiboy/Desktop/weather/src/DayCard.js",[],"/Users/smekiboy/Desktop/weather/src/DegreeToggle.js",[],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":2,"column":17,"nodeType":"77","messageId":"78","endLine":2,"endColumn":26},{"ruleId":"75","severity":1,"message":"79","line":2,"column":28,"nodeType":"77","messageId":"78","endLine":2,"endColumn":37},{"ruleId":"75","severity":1,"message":"80","line":2,"column":39,"nodeType":"77","messageId":"78","endLine":2,"endColumn":47},{"ruleId":"75","severity":1,"message":"81","line":70,"column":11,"nodeType":"77","messageId":"78","endLine":70,"endColumn":18},{"ruleId":"82","severity":1,"message":"83","line":24,"column":9,"nodeType":"84","messageId":"85","endLine":26,"endColumn":19},{"ruleId":"71","replacedBy":"86"},{"ruleId":"73","replacedBy":"87"},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useState' is defined but never used.","'sunrise' is assigned a value but never used.","no-duplicate-case","Duplicate case label.","SwitchCase","unexpected",["88"],["89"],"no-global-assign","no-unsafe-negation"]